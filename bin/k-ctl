#!/usr/bin/env bash
# vim: ai:ts=2:sw=2:et

##############################
# wrapper script for running
# helm against this chart

set -euf -o pipefail

dir="$(
  cd "$(dirname "${0}")"
  pwd
)"

CHART="${CHART:-gitlab}"

# Source common functions and variable exports
# that are common to all charts

COMMON_SCRIPT_PATH="${COMMON_SCRIPT_PATH:-/k8s-workloads/common.bash}"
AUTO_DEPLOY="${AUTO_DEPLOY:-false}"
CLUSTER_SKIP_CHECK_EXIT_CODE=${CLUSTER_SKIP_CHECK_EXIT_CODE:-0}
CLUSTER_SKIP=${CLUSTER_SKIP:-''}

if [[ -r "$COMMON_SCRIPT_PATH" ]]; then
  source "$COMMON_SCRIPT_PATH"
else
  # Grab the CI image version from  the .gitlab-ci.yml
  _BBLK="\\033[1;30m"
  _NORM="\\033[0m"
  version=$(yq e ".variables.CI_IMAGE_VERSION" .gitlab-ci.yml)
  echo -e "${_BBLK}Sourcing version $version of the common shell script"
  echo -e "if you want to use a local version set COMMON_SCRIPT_PATH to the location of common.bash"
  echo -e "or update .gitlab-ci.yml to set a new version${_NORM}"
  echo ""
  source <(curl -s "https://gitlab.com/gitlab-com/gl-infra/k8s-workloads/common/raw/$version/bin/common.bash")
fi

EXPEDITE_DEPLOYMENT=${EXPEDITE_DEPLOYMENT:-false}
NAME="${NAME:-gitlab${STAGE_SUFFIX}}"
NAMESPACE="${NAMESPACE:-gitlab${STAGE_SUFFIX}}"
CHARTS_DIR=$(mktemp -d)
MANIFESTS_DIR="$dir/../manifests"
HELM_DIFF_TMP_FNAME="/tmp/helm-diff"

is_semver() {
  if [[ $1 =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
    return 0
  else
    return 1
  fi
}

##
# Skip the desired cluster if specified
# Note that we'll do this for Diff jobs as well in the case that a cluster may be offline entirely
cluster_skip_check() {
  if [[ "${environment}" == "${CLUSTER_SKIP}" ]]; then
    debug "You've asked to skip deploying to this cluster" "${_BRED}"
    debug "-- Cluster Skip Check --" "${_CYN}"
    debug "CI Environment: ${_BLU}${environment}" "${_MAG}"
    debug "CLUSTER_SKIP  : ${_BLU}${CLUSTER_SKIP}" "${_MAG}"
    debug "Desired Exit Code: ${_BLU}${CLUSTER_SKIP_CHECK_EXIT_CODE}" "${_MAG}"
    debug "Exiting immediately to prevent a deployment" "${_BRED}"
    exit "${CLUSTER_SKIP_CHECK_EXIT_CODE}"
  fi
}

# Function to send messages to events elasticsearch index
sendEvent() {
  if [[ -z "${ENVIRONMENT_WITHOUT_STAGE:-}" || -z "${ES_NONPROD_EVENTS_URL:-}" || "${ES_EVENT_OVERRIDE:-}" == "true" ]]; then
    echo "Warning: Not sending events because one of ENVIRONMENT_WITHOUT_STAGE, ES_NONPROD_EVENTS_URL is not set or ES_EVENT_OVERRIDE is set to true"
    return
  fi
  command -v curl >/dev/null 2>&1 ||
    {
      echo >&2 "sending events requires curl but it's not installed."
      return
    }
  MSG="$1"
  TYPE="$3"
  STAGE="${4:-main}"
  TS=$(date -u +%s000)
  USERNAME="${GITLAB_USER_LOGIN:-unknown}"
  SOURCE="${CI_JOB_URL:-unknown}"
  VERSION="${GITLAB_IMAGE_TAG:-not set}"
  DATA="
    {
      \"time\": \"$TS\",
      \"type\": \"$TYPE\",
      \"message\": \"$MSG\",
      \"env\": \"$ENVIRONMENT_WITHOUT_STAGE\",
      \"username\": \"$USERNAME\",
      \"source\": \"$SOURCE\",
      \"version\": \"$VERSION\",
      \"stage\": \"$STAGE\"
    }
  "
  echo "Sending event: \"$MSG\""
  curl -s -X POST \
    --retry 5 \
    --retry-max-time 20 \
    "$ES_NONPROD_EVENTS_URL/events-${ENVIRONMENT_WITHOUT_STAGE}/_doc" -H 'Content-Type: application/json' -d "$DATA" >/dev/null
}

environment=${ENV}${STAGE_SUFFIX}
auto_deploy_changes_fname="${dir}/../auto-deploy-image-check/${environment}.json"
helmfile_common_options=(
  "--log-level" "${LOG_LEVEL:-info}"
  "--environment" "${environment}"
)

helmfile_cmd_options=(
  "--concurrency" "1"
  "--skip-deps"
  "--suppress-secrets"
)

if [[ $AUTO_DEPLOY == "true" ]]; then
  helmfile_common_options+=("-l" "autodeploy=true")
fi

json_cmp() {
  result=$(jq --argfile a "$1" --argfile b "$2" -n '($a | (.. | arrays) |= sort | del(.[] | select(.name | test("gitlab-.*registry-migrations-.*")))) as $a | ($b | (.. | arrays) |= sort) as $b | $a == $b')

  if [[ $result == "true" ]]; then
    return 0
  else
    return 1
  fi
}

helm_diff() {
  local diff_extra_args=$1
  helmfile "${helmfile_common_options[@]}" diff "${helmfile_cmd_options[@]}" --context=10 --args "$diff_extra_args"
}

auto_deploy_check() {
  # Checks to ensure that the changes exactly match
  # what we expect for an image-only update
  if [[ ${POST_DEPLOYMENT_PATCH:-} == "true" ]]; then
    debug "Image checks are skipped for post-deployment checks"
    return
  fi

  local diff_file=$1

  if [[ $(jq '. | length' "$diff_file") -eq 0 ]]; then
    debug "✅ There are no changes detected" "$_BGRN"
    return
  fi

  if json_cmp "$diff_file" "$auto_deploy_changes_fname"; then
    debug "✅ The number of changes are correct for an auto-deploy image update" "$_BGRN"
    return
  fi

  debug "❌ Unexpected number of changes for an image-only update" "$_BRED"
  debug ""
  debug "Expected:" "$_CYN"
  debug "-------"
  cat "$auto_deploy_changes_fname" >&2
  debug ""
  debug "Full diff:" "$_CYN"
  debug "-------"
  helm_diff ""
  debug ""
  debug "Check https://ops.gitlab.net/gitlab-com/gl-infra/k8s-workloads/gitlab-com/-/pipelines to see if there are any outstanding configuration changes, to override this failure set IMAGE_CHECK_OVERRIDE=true as a CI variable" "$_CYN"

  if [[ ${IMAGE_CHECK_OVERRIDE:-} == "true" ]]; then
    debug "WARNING: Bypassing auto-deploy image check because IMAGE_CHECK_OVERRIDE is set to true as a CI variable" "$_RED"
    return
  fi

  exit 1
}

case "$ACTION" in
  install | upgrade)
    overview
    cluster_skip_check

    if [[ ${dry_run:-} == "true" ]]; then
      debug "-- Helm Diff --" "${_CYN}"
      # Send a diff notification, allowed to
      # fail so we don't block the pipeline
      # Skip the notifications for auto-deploy triggered pipelines since they are not
      # done in the context of an MR.
      if [[ $AUTO_DEPLOY == "false" ]]; then
        helm_diff "" | tee "$HELM_DIFF_TMP_FNAME"
        if [[ -f /k8s-workloads/notify-mr ]] && ! "${EXPEDITE_DEPLOYMENT}"; then
          /k8s-workloads/notify-mr -d "$HELM_DIFF_TMP_FNAME" -e "$environment" || echo "WARNING: notify-mr diff notification failed"
        fi
      else
        helm_diff "--output=json" | tee "$HELM_DIFF_TMP_FNAME"
        # helm diff has an extra line that starts with "Comparing release"
        # that needs to be removed.
        sed -i -e '/^Comparing release/d' "$HELM_DIFF_TMP_FNAME"
        auto_deploy_check "$HELM_DIFF_TMP_FNAME"
      fi
    else
      ./bin/watch-gitlab-deployments.sh "${NAMESPACE}" &

      sendEvent "Starting k8s deployment for ${CLUSTER}" "$(if [[ $AUTO_DEPLOY == "false" ]]; then echo "configuration"; else echo "deployment"; fi)" "${STAGE}"
      helmfile "${helmfile_common_options[@]}" apply "${helmfile_cmd_options[@]}"
      sendEvent "Finished k8s deployment for ${CLUSTER}" "$(if [[ $AUTO_DEPLOY == "false" ]]; then echo "configuration"; else echo "deployment"; fi)" "${STAGE}"
    fi
    ;;

  list)
    # `helmfile` outputs less information for this command
    # since `helm` does better, let's leave that in place
    debug "-- Helm List --" "${_CYN}"
    helm list
    ;;

  remove)
    overview
    warn_removal

    # Remove secrets by removing gitlab-secrets release via helmfile
    if [[ ${dry_run:-} != "true" ]]; then
      helmfile "${helmfile_common_options[@]}" destroy
    else
      debug "Would run: helmfile ${helmfile_common_options[*]} destroy"
    fi
    ;;

  template)
    overview

    helmfile "${helmfile_common_options[@]}" template --skip-deps --output-dir "$MANIFESTS_DIR" --concurrency 1
    ;;
esac

set +x
rm -rf "${CHARTS_DIR:?}"
