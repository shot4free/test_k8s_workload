#!/usr/bin/env bash
# vim: ai:ts=2:sw=2:et

##############################
# wrapper script for running
# helm against this chart

set -euf -o pipefail
dir="$(
  cd "$(dirname "${0}")"
  pwd
)"

CHART="${CHART:-gitlab}"

export HELM_TILLER_LOGS=true
export HELM_TILLER_LOGS_DIR=${PWD}/tiller.log

# Source common functions and variable exports
# that are common to all charts

COMMON_SCRIPT_PATH="${COMMON_SCRIPT_PATH:-/k8s-workloads/common.bash}"

if [[ -r "$COMMON_SCRIPT_PATH" ]]; then
  source "$COMMON_SCRIPT_PATH"
else
  # Grab the CI image version from  the .gitlab-ci.yml
  _BBLK="\\033[1;30m"
  _NORM="\\033[0m"
  version=$(sed -E -e "s/[[:space:]]+CI_IMAGE_VERSION:[[:space:]]'(v[0-9\\.]+)'/\\1/" -e "t" -e "d" .gitlab-ci.yml)
  echo -e "${_BBLK}Sourcing version $version of the common shell script"
  echo -e "if you want to use a local version set COMMON_SCRIPT_PATH to the location of common.bash"
  echo -e "or update .gitlab-ci.yml to set a new version${_NORM}"
  echo ""
  source <(curl -s "https://gitlab.com/gitlab-com/gl-infra/k8s-workloads/common/raw/$version/bin/common.bash")
fi

NAME="${NAME:-gitlab${STAGE_SUFFIX}}"
NAMESPACE="${NAMESPACE:-gitlab${STAGE_SUFFIX}}"
CHART_VERSION=$(get_chart_version)
CHARTS_DIR=$(mktemp -d)
MANIFESTS_DIR="$dir/../manifests"

get_gitlab_chart() {
  if is_semver "$CHART_VERSION"; then
    if install_gitlab_chart_via_helm; then
      chart_install_method=helm
    elif install_gitlab_chart_via_s3; then
      chart_install_method=s3
    else
      debug "Unable to install chart using semver!" "${_RED}"
      exit 1
    fi
  else
    install_gitlab_chart_via_git
    chart_install_method=git
    # For non-semvers, attempt to install from git
    # and override CHART_VERSION to version+ref
    # Example: 3.1.0+0035def7
    CHART_VERSION="$CHART_VERSION_SHA"
  fi
  CHART_SOURCE=$(get_chart_source "$chart_install_method")
  debug "Setting CHART_SOURCE=$CHART_SOURCE" "${_YEL}"
  debug "Setting CHART_VERSION=$CHART_VERSION" "${_YEL}"

  # CHART_VERSION and CHART_SOURCE are needed
  # by releases/gitlab
  export CHART_VERSION
  export CHART_SOURCE
}

is_semver() {
  if [[ $1 =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
    return 0
  else
    return 1
  fi
}

get_chart_source() {
  case $1 in
    git)
      echo 'gitlab-git/gitlab'
      ;;
    helm)
      echo 'gitlab/gitlab'
      ;;
    s3)
      echo 'gitlab-s3/gitlab'
      ;;
  esac
}

install_gitlab_chart_via_git() {
  local chart_ref="$CHART_VERSION"
  local extracted_charts_dir="${CHARTS_DIR}/${CHART}"

  mkdir "$extracted_charts_dir"
  git clone https://gitlab.com/gitlab-org/charts/gitlab.git "$extracted_charts_dir" >/dev/null

  pushd "$extracted_charts_dir"
  git checkout "${chart_ref}"

  local version sha chart_version_sha
  version=$(grep version Chart.yaml | awk '{print $2}')
  sha=$(git rev-parse --short HEAD)
  chart_version_sha="${version}+${sha}"

  helm repo add cert-manager https://charts.jetstack.io/
  helm repo add gitlab https://charts.gitlab.io/
  helm dependencies build
  helm package ./ --save --version "$chart_version_sha"
  helm serve &
  popd
  CHART_VERSION_SHA="$chart_version_sha"
  debug "Setting CHART_VERSION_SHA=$chart_version_sha"
}

install_gitlab_chart_via_helm() {
  curl --fail -s -o /dev/null "https://charts.gitlab.io"
}

install_gitlab_chart_via_s3() {
  curl --fail -s "https://gitlab-charts.s3.amazonaws.com/${CHART}-${CHART_VERSION}.tgz" | tar xzC "$CHARTS_DIR"
}

environment=${ENV}${STAGE_SUFFIX}
helmfile_common_options=(
  "--log-level" "${LOG_LEVEL:-info}"
  "--environment" "${environment}"
)

helmfile_cmd_options=(
  "--concurrency" "1"
  "--skip-deps"
  "--suppress-secrets"
)

helm_diff() {
  helmfile "${helmfile_common_options[@]}" diff "${helmfile_cmd_options[@]}"
}

case "$ACTION" in
  install | upgrade)
    overview

    get_gitlab_chart

    helmfile "${helmfile_common_options[@]}" repos

    if [[ ${dry_run:-} == "true" ]]; then
      debug "-- Helm Diff --" "${_CYN}"
      helm_diff | tee /tmp/helm-diff
      # Send a diff notification, allowed to
      # fail so we don't block the pipeline
      # Skip the notifications for auto-deploy triggered pipelines since they are not
      # done in the context of an MR.
      if [[ ${AUTO_DEPLOY:-false} == "false" && -f /k8s-workloads/notify-mr ]]; then
        /k8s-workloads/notify-mr -d /tmp/helm-diff -e "$environment" || echo "WARNING: notify-mr diff notification failed"
      fi
      debug "-------" "${_CYN}"
    else
      tail --pid=$$ --retry --follow "${HELM_TILLER_LOGS_DIR}" &

      helmfile "${helmfile_common_options[@]}" apply "${helmfile_cmd_options[@]}"
    fi
    ;;

  list)
    # `helmfile` outputs less information for this command
    # since `helm` does better, let's leave that in place
    debug "-- Helm List --" "${_CYN}"
    helm tiller run helm list
    ;;

  remove)
    overview
    warn_removal

    # Remove secrets by removing gitlab-secrets release via helmfile
    if [[ ${dry_run:-} != "true" ]]; then
      helmfile "${helmfile_common_options[@]}" destroy
    else
      debug "Would run: helmfile ${helmfile_common_options[*]} destroy"
    fi
    ;;

  template)
    overview
    get_gitlab_chart

    helmfile "${helmfile_common_options[@]}" template --output-dir "$MANIFESTS_DIR" --concurrency 1
    ;;
esac

set +x
rm -rf "${CHARTS_DIR:?}"
