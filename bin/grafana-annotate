#!/usr/bin/env bash
# vim: ai:ts=2:sw=2:et

set -euf -o pipefail

fail() {
  usage
  exit 1
}

usage() {
  echo "$0 -e ENVIRONMENT [ -s STAGE ]" 1>&2
}

while getopts ":e:s:h" options; do
  case "$options" in
    e)
      environment=$OPTARG
      ;;
    h)
      usage
      exit 0
      ;;
    s)
      stage=$OPTARG
      ;;
    :)
      echo "Missing argument: -$OPTARG."
      fail
      ;;
    ?)
      echo "Invalid option: -$OPTARG."
      fail
      ;;
    *)
      fail
      ;;
  esac
done

main() {
  stage=${stage:-main}

  if [[ -z "$GRAFANA_URL" || -z "$GRAFANA_API_KEY" ]]; then
    echo 'Failed to annotate grafana, missing GRAFANA_URL and/or GRAFANA_TOKEN'
    return
  fi

  local payload
  payload=$(
    jq -n \
      --arg ci_project_name "$CI_PROJECT_NAME" \
      --arg environment "$environment" \
      --arg stage "$stage" \
      --arg user_login "$GITLAB_USER_LOGIN" \
      --arg pipeline_iid "$CI_PIPELINE_IID" \
      '{tags: ["k8s-workloads", $ci_project_name, $environment, $stage], text: "\($user_login) applied k8s-workloads/\($ci_project_name) pipeline #\($pipeline_iid) for \($environment) \($stage)"}'
  )

  printf 'Adding Grafana annotation:\n%s\n' "$payload"

  curl "${GRAFANA_URL}" \
    -X POST \
    --retry 3 \
    -H "Authorization: Bearer ${GRAFANA_API_KEY}" \
    -H "Content-Type: application/json" \
    -d "$payload"
}

main
