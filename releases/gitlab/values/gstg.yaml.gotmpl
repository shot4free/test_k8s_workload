---

nginx-ingress:
  nodeSelector:
    cloud.google.com/gke-nodepool: default-2

registry:
  middleware:
    storage:
      - name: googlecdn
        options:
          baseurl: cdn.registry.staging.gitlab-static.net
          privatekeySecret:
            secret: registry-cdn-private-key-v1
            key: private-key
          keyname: gstg-registry-cdn
          ipfilteredby: gcp
  database:
    enabled: true
    host: pgbouncer-registry.int.gstg.gitlab.net
    port: 6432
    user: gitlab-registry
    name: gitlabhq_registry
    password:
      secret: registry-postgresql-password-v1
    pool:
      maxopen: 16
      maxidle: 16
      maxlifetime: 5m
  migration:
    enabled: true
    disablemirrorfs: true
    rootdirectory: gitlab
    importnotification:
      enabled: true
    maxconcurrentimports: 2
  storage:
    secret: registry-storage-v4
  # When enabled, the upload purger will attempt to make deletes against the
  # common GCS bucket. It is not suitable to be enabled in production until the
  # following issues are resolved:
  # https://gitlab.com/gitlab-org/container-registry/-/issues/216
  # https://gitlab.com/gitlab-org/container-registry/-/issues/217
  maintenance:
    uploadpurging:
      enabled: false
  gc:
    disabled: false
    maxbackoff: 30m
    reviewafter: 30m
  validation:
    disabled: false
    manifests:
      referencelimit: 200
      payloadsizelimit: 256000
      urls:
        # this is needed to keep backwards compatibility when `validation.disabled: false`, as by default an empty `allow` means no URLs are allowed
        allow:
          - .*
  hpa:
    maxReplicas: 20

gitlab:
  gitlab-shell:
    extraEnv:
      GITLAB_CONTINUOUS_PROFILING: stackdriver?service=gitlab-shell
    metrics:
      enabled: true
    serviceAccount:
      annotations:
        iam.gke.io/gcp-service-account: gitlab-gitlab-shell@{{ .Values.google_project }}.iam.gserviceaccount.com
    sshDaemon: gitlab-sshd
  gitlab-pages:
    hpa:
      minReplicas: 2
      targetAverageValue: 400m
    resources:
      requests:
        cpu: 500m
        memory: 70M
      limits:
        memory: 1G
    extraEnv:
      FF_HANDLE_CACHE_HEADERS: "true"
      FF_ENFORCE_IP_RATE_LIMITS: "true"
      FF_ENFORCE_DOMAIN_RATE_LIMITS: "true"
      FF_ENFORCE_IP_TLS_RATE_LIMITS: "true"
      FF_ENFORCE_DOMAIN_TLS_RATE_LIMITS: "true"
    rateLimitSourceIP: 20
    rateLimitSourceIPBurst: 1000
    rateLimitDomain: 100
    rateLimitDomainBurst: 2000
    rateLimitTLSSourceIP: 5
    rateLimitTLSSourceIPBurst: 10
    rateLimitTLSDomain: 20
    rateLimitTLSDomainBurst: 100
    zipCache:
      expiration: 300s
  mailroom:
    image:
      repository: dev.gitlab.org:5005/gitlab/charts/components/images/gitlab-mailroom
      # Pin the tag to avoid following the chart default
      # https://gitlab.com/groups/gitlab-com/gl-infra/-/epics/201
      tag: 0.0.19
      pullSecrets:
        - name: dev-registry-access-v1
    nodeSelector:
      cloud.google.com/gke-nodepool: default-2
  webservice:
    deployments:
      api:
        nodeSelector:
          cloud.google.com/gke-nodepool: api-2
      web:
        extraEnv:
          CUSTOMER_PORTAL_URL: "https://customers.staging.gitlab.com"
          GITLAB_PERFORMANCE_BAR_STATS_URL: "https://nonprod-log.gitlab.net/app/dashboards#/view/8d301370-72b4-11eb-9f15-4952965e0e78?_g=(filters%3A!()%2CrefreshInterval%3A(pause%3A!t%2Cvalue%3A0)%2Ctime%3A(from%3Anow-15m%2Cto%3Anow))"
          GITLAB_LICENSE_MODE: test # This should be enabled only for staging, see https://gitlab.com/gitlab-com/gl-infra/infrastructure/-/issues/11393#note_631781706
    minReplicas: 2
    maxReplicas: 30
    extraEnv:
      GITLAB_THROTTLE_BYPASS_HEADER: "X-GitLab-RateLimit-Bypass"
      GITLAB_THROTTLE_DRY_RUN: "throttle_unauthenticated_files_api,throttle_authenticated_files_api"
      DISABLE_PUMA_NAKAYOSHI_FORK: "true"
      USE_NEW_LOAD_BALANCER_QUERY: "true"
      GITLAB_PERFORMANCE_BAR_STATS_URL: "https://nonprod-log.gitlab.net/app/dashboards#/view/8d301370-72b4-11eb-9f15-4952965e0e78?_g=(filters%3A!()%2CrefreshInterval%3A(pause%3A!t%2Cvalue%3A0)%2Ctime%3A(from%3Anow-15m%2Cto%3Anow))"
      GITLAB_LOG_DEPRECATIONS: "true"
      GITLAB_LOAD_BALANCING_REUSE_PRIMARY_ci: "main"
      GITLAB_MULTIPLE_DATABASE_METRICS: "true"
      # https://gitlab.com/gitlab-com/gl-infra/production/-/issues/5950
      GITLAB_ENABLE_QUERY_ANALYZERS: "true"
      ENABLE_CROSS_DATABASE_MODIFICATION_DETECTION: "true"
    workhorse:
      resources:
        limits:
          memory: 2G
        requests:
          cpu: 600m
          memory: 200M
      sentryDSN: "https://b62b72db8c264412ab406fdb6db248ff@sentry.gitlab.net/94"
    resources:
      limits:
        memory: 6.0G
      requests:
        cpu: 4
        memory: 5G
  kas:
    image:
      tag: v14.9.0
    nodeSelector:
      cloud.google.com/gke-nodepool: default-2
    service:
      # gcloud compute address kas-internal-gke-gstg
      loadBalancerIP: 10.224.34.18
    workhorse:
      scheme: 'https'
      host: 'int.gstg.gitlab.net'
      port: 11443
    customConfig:
      observability:
        sentry:
          dsn: https://af4940ad841b46d78708595fc654af78@sentry.gitlab.net/124
          environment: {{ .Environment.Values | getOrNil "env_prefix" }}
  sidekiq:
    extraEnv:
      SIDEKIQ_SEMI_RELIABLE_FETCH_TIMEOUT: 5
      USE_GITLAB_LOGGER: 1
      GITLAB_LOG_DEPRECATIONS: "true"
      CUSTOMER_PORTAL_URL: "https://customers.staging.gitlab.com"
      GITLAB_LOAD_BALANCING_REUSE_PRIMARY_ci: "main"
      GITLAB_MULTIPLE_DATABASE_METRICS: "true"
      # https://gitlab.com/gitlab-com/gl-infra/production/-/issues/5950
      GITLAB_ENABLE_QUERY_ANALYZERS: "true"
      ENABLE_CROSS_DATABASE_MODIFICATION_DETECTION: "true"
    extraInitContainers: |
      - name: write-instance-name
        args:
          - -c
          - echo "$INSTANCE_NAME" > /etc/gitlab/instance_name
        command:
          - sh
        env:
          - name: INSTANCE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
        image: 'busybox:latest'
        volumeMounts:
          - mountPath: /etc/gitlab
            name: sidekiq-secrets
    pods:
      - name: catchall
        common:
          labels:
            shard: catchall
        concurrency: 15
        minReplicas: 1
        maxReplicas: 100
        nodeSelector:
          cloud.google.com/gke-nodepool: catchall-0
        podLabels:
          deployment: sidekiq-catchall
          shard: catchall
        queueSelector: false
        queues: "default,mailers,project_import_schedule"
        resources:
          requests:
            cpu: 800m
            memory: 1G
          limits:
            cpu: 1.5
            memory: 2G
        extraEnv:
          GITLAB_SENTRY_EXTRA_TAGS: "{\"type\": \"sidekiq\", \"stage\": \"main\", \"shard\": \"catchall\"}"
        extraVolumes: |
          # This is needed because of https://gitlab.com/gitlab-org/gitlab/-/issues/330317
          # where temp files are written to `/srv/gitlab/shared`
          - name: sidekiq-shared
            emptyDir:
              sizeLimit: 10G
      - name: imports
        common:
          labels:
            shard: imports
        concurrency: 1
        minReplicas: 2
        maxReplicas: 2
        nodeSelector:
          cloud.google.com/gke-nodepool: catchall-0
        podLabels:
          deployment: sidekiq-imports
          shard: imports
        queueSelector: false
        queues: imports
        resources:
          requests:
            cpu: 800m
            memory: 1G
          limits:
            cpu: 1.5
            memory: 2G
        extraEnv:
          GITLAB_SENTRY_EXTRA_TAGS: "{\"type\": \"sidekiq\", \"stage\": \"main\", \"shard\": \"imports\"}"
      - name: memory-bound
        common:
          labels:
            shard: memory-bound
        concurrency: 1
        minReplicas: 1
        maxReplicas: 16
        nodeSelector:
          cloud.google.com/gke-nodepool: sidekiq-memory-bound-1
        podLabels:
          deployment: sidekiq-memory-bound
          shard: memory-bound
        queueSelector: false
        queues: memory_bound
        resources:
          requests:
            cpu: 500m
            memory: 3G
          limits:
            cpu: 2
            memory: 8G
        extraVolumeMounts: |
          - name: sidekiq-shared
            mountPath: /srv/gitlab/shared
            readOnly: false
        extraVolumes: |
          - name: sidekiq-shared
            emptyDir:
              sizeLimit: 50G
        extraEnv:
          GITLAB_SENTRY_EXTRA_TAGS: "{\"type\": \"sidekiq\", \"stage\": \"main\", \"shard\": \"memory-bound\"}"
      # Run background migrations in their own shard
      - name: database-throttled
        common:
          labels:
            shard: database-throttled
        concurrency: 5 # Discussion on this value in https://gitlab.com/gitlab-com/gl-infra/k8s-workloads/gitlab-com/-/merge_requests/276/diffs#note_367270352
        minReplicas: 1
        maxReplicas: 1
        nodeSelector:
          cloud.google.com/gke-nodepool: default-2
        podLabels:
          deployment: sidekiq-database-throttled
          shard: database-throttled
        queueSelector: false
        queues: database_throttled
        resources:
          requests:
            cpu: 500m
            memory: 3G
          limits:
            cpu: 1.5
            memory: 8G
        extraEnv:
          GITLAB_SENTRY_EXTRA_TAGS: "{\"type\": \"sidekiq\", \"stage\": \"main\", \"shard\": \"database-throttled\"}"
      # Run Gitaly Storage Migrations on their own shards
      # https://gitlab.com/gitlab-com/gl-infra/scalability/-/issues/436
      # Allow up to a maximum of 24 concurrent gitaly-throttled jobs
      - name: gitaly-throttled
        common:
          labels:
            shard: gitaly-throttled
        concurrency: 8
        minReplicas: 1
        maxReplicas: 3
        nodeSelector:
          cloud.google.com/gke-nodepool: default-2
        podLabels:
          deployment: sidekiq-gitaly-throttled
          shard: gitaly-throttled
        queueSelector: false
        queues: gitaly_throttled
        resources:
          requests:
            cpu: 500m
            memory: 1300M
          limits:
            cpu: 1.5
            memory: 6G
        extraEnv:
          GITLAB_SENTRY_EXTRA_TAGS: "{\"type\": \"sidekiq\", \"stage\": \"main\", \"shard\": \"gitaly-throttled\"}"
      - name: elasticsearch
        common:
          labels:
            shard: elasticsearch
        concurrency: 2
        minReplicas: 2
        maxReplicas: 2
        nodeSelector:
          cloud.google.com/gke-nodepool: default-2
        podLabels:
          deployment: sidekiq-elasticsearch
          shard: elasticsearch
        queueSelector: false
        queues: elasticsearch
        resources:
          requests:
            cpu: 800m
            memory: 2G
          limits:
            cpu: 2
            memory: 8G
        extraEnv:
          GITLAB_SENTRY_EXTRA_TAGS: "{\"type\": \"sidekiq\", \"stage\": \"main\", \"shard\": \"elasticsearch\"}"
      - name: low-urgency-cpu-bound
        common:
          labels:
            shard: low-urgency-cpu-bound
        concurrency: 5
        minReplicas: 2
        maxReplicas: 10
        nodeSelector:
          cloud.google.com/gke-nodepool: sidekiq-low-urgency-cpu-bound-1
        podLabels:
          deployment: sidekiq-low-urgency-cpu-bound
          shard: low-urgency-cpu-bound
        queueSelector: false
        queues: low_urgency_cpu_bound
        resources:
          requests:
            cpu: 1
            memory: 5G
          limits:
            cpu: 1.5
            memory: 6G
        extraEnv:
          GITLAB_SENTRY_EXTRA_TAGS: "{\"type\": \"sidekiq\", \"stage\": \"main\", \"shard\": \"low-urgency-cpu-bound\"}"
      # This is a shard that segregates seemingly problematic queues from the rest of our infrastructure
      - name: quarantine
        common:
          labels:
            shard: quarantine
        concurrency: 15
        minReplicas: 1
        maxReplicas: 50
        nodeSelector:
          cloud.google.com/gke-nodepool: catchall-0
        podLabels:
          deployment: sidekiq-quarantine
          shard: quarantine
        queueSelector: false
        queues: quarantine
        resources:
          requests:
            cpu: 800m
            memory: 1G
          limits:
            cpu: 1.5
            memory: 2G
        extraEnv:
          GITLAB_SENTRY_EXTRA_TAGS: "{\"type\": \"sidekiq\", \"stage\": \"main\", \"shard\": \"quarantine\"}"
      - name: urgent-cpu-bound
        common:
          labels:
            shard: urgent-cpu-bound
        concurrency: 5
        minReplicas: 1
        maxReplicas: 10
        nodeSelector:
          cloud.google.com/gke-nodepool: sidekiq-urgent-cpu-bound-1
        podLabels:
          deployment: sidekiq-urgent-cpu-bound
          shard: urgent-cpu-bound
        queueSelector: false
        queues: urgent_cpu_bound
        resources:
          requests:
            cpu: 650m
            memory: 2.5G
          limits:
            cpu: 1
            memory: 3.1G
        extraEnv:
          GITLAB_SENTRY_EXTRA_TAGS: "{\"type\": \"sidekiq\", \"stage\": \"main\", \"shard\": \"urgent-cpu-bound\"}"
      - name: urgent-other
        common:
          labels:
            shard: urgent-other
        concurrency: 5
        minReplicas: 5
        maxReplicas: 10
        nodeSelector:
          cloud.google.com/gke-nodepool: sidekiq-urgent-other-1
        podLabels:
          deployment: sidekiq-urgent-other
          shard: urgent-other
        queueSelector: false
        queues: urgent_other,email_receiver,service_desk_email_receiver
        resources:
          requests:
            cpu: 500m
            memory: 2G
          limits:
            cpu: 1.5
            memory: 3G
        extraEnv:
          GITLAB_SENTRY_EXTRA_TAGS: "{\"type\": \"sidekiq\", \"stage\": \"main\", \"shard\": \"urgent-other\"}"
    psql:
      database: gitlabhq_production_sidekiq
      host: pgbouncer-sidekiq.int.gstg.gitlab.net
      load_balancing:
        discover:
          nameserver: <%= File.read('/etc/gitlab/instance_name').strip %>
          record: db-replica.service.consul.
          record_type: SRV
          port: 8600
          use_tcp: true
      ci:
        host: pgbouncer-sidekiq-ci.int.gstg.gitlab.net
        load_balancing:
          discover:
            nameserver: <%= File.read('/etc/gitlab/instance_name').strip %>
            record: ci-db-replica.service.consul.
            record_type: SRV
            port: 8600
            use_tcp: true

global:
  appConfig:
    artifacts:
      bucket: gitlab-gstg-artifacts
    contentSecurityPolicy:
      enabled: true
      report_only: false
      directives:
        connect_src: "'self' https://staging.gitlab.com https://gl-staging.freetls.fastly.net https://gl-staging-canary.freetls.fastly.net wss://gitlab.com wss://staging.gitlab.com wss://gstg.gitlab.com https://sentry.gitlab.net https://customers.staging.gitlab.com https://snowplow.trx.gitlab.net https://ec2.ap-east-1.amazonaws.com https://ec2.ap-northeast-1.amazonaws.com https://ec2.ap-northeast-2.amazonaws.com https://ec2.ap-northeast-3.amazonaws.com https://ec2.ap-south-1.amazonaws.com https://ec2.ap-southeast-1.amazonaws.com https://ec2.ap-southeast-2.amazonaws.com https://ec2.ca-central-1.amazonaws.com https://ec2.eu-central-1.amazonaws.com https://ec2.eu-north-1.amazonaws.com https://ec2.eu-west-1.amazonaws.com https://ec2.eu-west-2.amazonaws.com https://ec2.eu-west-3.amazonaws.com https://ec2.me-south-1.amazonaws.com https://ec2.sa-east-1.amazonaws.com https://ec2.us-east-1.amazonaws.com https://ec2.us-east-2.amazonaws.com https://ec2.us-west-1.amazonaws.com https://ec2.us-west-2.amazonaws.com https://ec2.af-south-1.amazonaws.com https://iam.amazonaws.com"
        frame_ancestors: "'self'"
        frame_src: "'self' https://gl-staging.freetls.fastly.net https://www.google.com/recaptcha/ https://www.recaptcha.net/ https://content.googleapis.com https://content-cloudresourcemanager.googleapis.com https://content-compute.googleapis.com https://content-cloudbilling.googleapis.com https://*.codesandbox.io https://customers.staging.gitlab.com"
        img_src: "* data: blob:"
        object_src: "'none'"
        report_uri: "https://sentry.gitlab.net/api/15/security/?sentry_key=526a2f38a53d44e3a8e69bfa001d1e8b"
        script_src: "'strict-dynamic' 'self' 'unsafe-inline' 'unsafe-eval' https://gl-staging.freetls.fastly.net https://gl-staging-canary.freetls.fastly.net https://www.google.com/recaptcha/ https://www.gstatic.com/recaptcha/ https://www.recaptcha.net/ https://apis.google.com https://*.pendo.io"
        style_src: "'self' 'unsafe-inline' https://gl-staging.freetls.fastly.net https://gl-staging-canary.freetls.fastly.net"
        worker_src: "https://gl-staging.freetls.fastly.net https://gl-staging-canary.freetls.fastly.net https://staging.gitlab.com blob: data:"
    cron_jobs:
      schedule_migrate_external_diffs_worker:
        cron: "*/5 * * * *"
      test_data_cleanup_worker:
        cron: "* * */3 * *"
        job_class: "Quality::TestDataCleanupWorker"
    dependencyProxy:
      enabled: true
      bucket: gitlab-gstg-dependency-proxy
    externalDiffs:
      enabled: true
      bucket: gitlab-gstg-external-diffs
    incomingEmail:
      address: "incoming-staging+%{key}@gitlab.com"
      user: incoming-staging@gitlab.com
    lfs:
      bucket: gitlab-gstg-lfs-objects
    omniauth:
      providers:
        - secret: gitlab-google-oauth2-v1
        - secret: gitlab-twitter-oauth2-v1
        - secret: gitlab-github-oauth2-v1
        - secret: gitlab-bitbucket-oauth2-v1
        - secret: gitlab-group-saml-oauth2-v1
        - secret: gitlab-salesforce-oauth2-v1
    packages:
      bucket: gitlab-gstg-package-repo
    sentry:
      clientside_dsn: https://526a2f38a53d44e3a8e69bfa001d1e8b@sentry.gitlab.net/15
      dsn: https://0cfeea6daa0d4f2a90c1e86b4b82830a:ec54f3af800242fd8ff023305035c514@sentry.gitlab.net/10
      environment: gstg
    serviceDeskEmail:
      enabled: true
      address: "contact-project-staging+%{key}@incoming.gitlab.com"
      user: contact-project-staging@incoming.gitlab.com
    sidekiq:
      routingRules:
        # We cannot migrate these workers yet: https://gitlab.com/gitlab-org/gitlab/-/issues/340630 / https://gitlab.com/gitlab-com/gl-infra/scalability/-/issues/1263 / https://gitlab.com/gitlab-org/gitlab/-/issues/340629
        - ["tags=needs_own_queue", null]
        - ["worker_name=AuthorizedProjectUpdate::UserRefreshFromReplicaWorker,AuthorizedProjectUpdate::UserRefreshWithLowUrgencyWorker", "quarantine"] # move this to the quarantine shard
        - ["worker_name=RepositoryImportWorker", "imports"] # imports
        - ["resource_boundary=cpu&urgency=high", "urgent_cpu_bound"] # urgent-cpu-bound
        - ["resource_boundary=memory", "memory_bound"] # memory-bound
        - ["feature_category=global_search&urgency=throttled", "elasticsearch"] # elasticsearch
        - ["resource_boundary!=cpu&urgency=high", "urgent_other"] # urgent-other
        - ["resource_boundary=cpu&urgency=default,low", "low_urgency_cpu_bound"] # low-urgency-cpu-bound
        - ["feature_category=database&urgency=throttled", "database_throttled"] # database-throttled
        - ["feature_category=gitaly&urgency=throttled", "gitaly_throttled"] # gitaly-throttled
        - ["*", "default"] # catchall on k8s
    terraformState:
      enabled: true
      bucket: gitlab-gstg-terraform-state
    uploads:
      bucket: gitlab-gstg-uploads
    extra:
      oneTrustId: 7f944245-c5cd-4eed-a90e-dd955adfdd08
      googleTagManagerNonceId: GTM-NJXWQL

  email:
    from: gitlab@mg.gitlab.com
    reply_to: noreply@staging.gitlab.com

  geo:
    enabled: true
    nodeName: {{ .Environment.Values | getOrNil "gitlab_domain" | default "" }}
    role: primary
    registry:
      syncSecret:
        secret: gitlab-registry-notification-v1
    replication:
      enabled: true

  gitaly:
    external:
      - hostname: file-01-stor-gstg.c.gitlab-staging-1.internal
        name: default
        port: "9999"
        tlsEnabled: false
      - hostname: file-01-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file01
        port: "9999"
        tlsEnabled: false
      - hostname: file-01-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file02
        port: "9999"
        tlsEnabled: false
      - hostname: file-01-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file03
        port: "9999"
        tlsEnabled: false
      - hostname: file-01-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file04
        port: "9999"
        tlsEnabled: false
      - hostname: file-01-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file05
        port: "9999"
        tlsEnabled: false
      - hostname: file-01-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file06
        port: "9999"
        tlsEnabled: false
      - hostname: file-01-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file07
        port: "9999"
        tlsEnabled: false
      - hostname: file-01-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file08
        port: "9999"
        tlsEnabled: false
      - hostname: file-02-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file09
        port: "9999"
        tlsEnabled: false
      - hostname: file-02-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file10
        port: "9999"
        tlsEnabled: false
      - hostname: file-02-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file11
        port: "9999"
        tlsEnabled: false
      - hostname: file-02-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file12
        port: "9999"
        tlsEnabled: false
      - hostname: file-02-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file13
        port: "9999"
        tlsEnabled: false
      - hostname: file-02-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file14
        port: "9999"
        tlsEnabled: false
      - hostname: file-02-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file15
        port: "9999"
        tlsEnabled: false
      - hostname: file-02-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file16
        port: "9999"
        tlsEnabled: false
      - hostname: file-02-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file17
        port: "9999"
        tlsEnabled: false
      - hostname: file-02-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file18
        port: "9999"
        tlsEnabled: false
      - hostname: file-02-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file19
        port: "9999"
        tlsEnabled: false
      - hostname: file-02-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file20
        port: "9999"
        tlsEnabled: false
      - hostname: file-zfs-01-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file21
        port: "9999"
        tlsEnabled: false
      - hostname: i.gstg-gcp-tcp-lb-internal-praefect.il4.us-east1.lb.gitlab-staging-1.internal
        name: nfs-file22
        port: "2305"
        tlsEnabled: false
      - hostname: file-hdd-01-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file23
        port: "9999"
        tlsEnabled: false
      - hostname: file-06-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file24
        port: "9999"
        tlsEnabled: false
      - hostname: file-cny-01-stor-gstg.c.gitlab-staging-1.internal
        name: nfs-file-cny01
        port: "9999"
        tlsEnabled: false
      - hostname: i.gstg-gcp-tcp-lb-internal-praefect-cny.il4.us-east1.lb.gitlab-staging-1.internal
        name: nfs-file-cny02
        port: "2305"
        tlsEnabled: false

  hosts:
    gitlab:
      name: staging.gitlab.com
    kas:
      name: kas.staging.gitlab.com
    registry:
      name: registry.staging.gitlab.com

  pages:
    host: staging.gitlab.io
  psql:
    host: pgbouncer.int.gstg.gitlab.net
    port: 6432
    prepared_statements: false
    load_balancing:
      discover:
        nameserver: <%= File.read('/etc/gitlab/instance_name').strip %>
        record: db-replica.service.consul.
        record_type: SRV
        port: 8600
        use_tcp: true
    ci:
      host: pgbouncer-ci.int.gstg.gitlab.net
      port: 6432
      prepared_statements: false
      load_balancing:
        discover:
          nameserver: <%= File.read('/etc/gitlab/instance_name').strip %>
          record: ci-db-replica.service.consul.
          record_type: SRV
          port: 8600
          use_tcp: true
  redis:
    cache:
      host: gstg-redis-cache
      password:
        enabled: true
        key: secret
        secret: gitlab-redis-credential-v1
      sentinels:
      - host: redis-cache-sentinel-01-db-gstg.c.gitlab-staging-1.internal
        port: 26379
      - host: redis-cache-sentinel-02-db-gstg.c.gitlab-staging-1.internal
        port: 26379
      - host: redis-cache-sentinel-03-db-gstg.c.gitlab-staging-1.internal
        port: 26379
    host: gstg-redis
    password:
      enabled: true
      key: secret
      secret: gitlab-redis-credential-v1
    queues:
      host: gstg-redis-sidekiq
      password:
        enabled: true
        key: secret
        secret: gitlab-redis-credential-v1
      sentinels:
      - host: redis-sidekiq-01-db-gstg.c.gitlab-staging-1.internal
        port: 26379
      - host: redis-sidekiq-02-db-gstg.c.gitlab-staging-1.internal
        port: 26379
      - host: redis-sidekiq-03-db-gstg.c.gitlab-staging-1.internal
        port: 26379
    rateLimiting:
      host: gstg-redis-ratelimiting
      password:
        enabled: true
        key: secret
        secret: gitlab-redis-credential-v1
      sentinels:
      - host: redis-ratelimiting-01-db-gstg.c.gitlab-staging-1.internal
        port: 26379
      - host: redis-ratelimiting-02-db-gstg.c.gitlab-staging-1.internal
        port: 26379
      - host: redis-ratelimiting-03-db-gstg.c.gitlab-staging-1.internal
        port: 26379
    sentinels:
    - host: redis-01-db-gstg.c.gitlab-staging-1.internal
      port: 26379
    - host: redis-02-db-gstg.c.gitlab-staging-1.internal
      port: 26379
    - host: redis-03-db-gstg.c.gitlab-staging-1.internal
      port: 26379
    sharedState:
      host: gstg-redis
      password:
        enabled: true
        key: secret
        secret: gitlab-redis-credential-v1
      sentinels:
      - host: redis-01-db-gstg.c.gitlab-staging-1.internal
        port: 26379
      - host: redis-02-db-gstg.c.gitlab-staging-1.internal
        port: 26379
      - host: redis-03-db-gstg.c.gitlab-staging-1.internal
        port: 26379
    traceChunks:
      host: gstg-redis-tracechunks
      password:
        enabled: true
        key: secret
        secret: gitlab-redis-credential-v1
      sentinels:
      - host: redis-tracechunks-01-db-gstg.c.gitlab-staging-1.internal
        port: 26379
      - host: redis-tracechunks-02-db-gstg.c.gitlab-staging-1.internal
        port: 26379
      - host: redis-tracechunks-03-db-gstg.c.gitlab-staging-1.internal
        port: 26379
    sessions:
      host: gstg-redis-sessions
      password:
        enabled: true
        key: secret
        secret: gitlab-redis-credential-v1
      sentinels:
      - host: redis-sessions-01-db-gstg.c.gitlab-staging-1.internal
        port: 26379
      - host: redis-sessions-02-db-gstg.c.gitlab-staging-1.internal
        port: 26379
      - host: redis-sessions-03-db-gstg.c.gitlab-staging-1.internal
        port: 26379
  smtp:
    domain: mg.staging.gitlab.com
    user_name: postmaster@mg.staging.gitlab.com
