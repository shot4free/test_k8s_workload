---

{{ $namespace := .Values | getOrNil "gitlab_extras.namespace" | default "gitlab" }}

global:
  common:
    labels:
      stage: {{ if eq $namespace "gitlab-cny" }}"cny"{{ else }}"main"{{ end }}
      shard: default
      tier: sv

  ## doc/charts/globals.md#configure-host-settings
  hosts:
    domain: {{ .Values | getOrNil "gitlab_domain" | default "" }}

  ## doc/charts/globals.md#configure-ingress-settings
  ingress:
    configureCertmanager: false
    enabled: false
    pathType: ImplementationSpecific
    ## This is added kas which using GCE ingress. GCE Ingress must has wildcard paths ending in '/*'. Unfortunately this sets this
    ## Globally for all ingress objects, but due to the fact that it's overriden back on each ingress to '/', only kas picks this up.
    path: "/*"
    tls:
      enabled: true
      secretName: gitlab-pages-tls-certificate-v1

  kas:
    enabled: {{ .Values.gitlab.kas.enabled }}
  oauth:
    gitlab-pages:
      secret: gitlab-pages-auth-client-secret-v1
  pages:
    accessControl: true
    authSecret:
      secret: gitlab-pages-auth-secret-v1
    apiSecret:
      secret: gitlab-pages-api-credential-v1
    externalHttps: true
    host: gitlab.io
    objectStore:
      enabled: true
      bucket: "gitlab-{{ .Values | getOrNil "env_prefix" }}-pages"
      connection:
        secret: gitlab-object-storage-v1
        key: gitlab-object-storage.yml

  ## doc/charts/globals.md#configure-postgresql-settings
  psql:
    # For https://gitlab.com/gitlab-com/gl-infra/production/-/issues/4089
    keepalives: 1
    keepalivesIdle: 5
    keepalivesInterval: 3
    keepalivesCount: 3
    tcpUserTimeout: 13000
    connectTimeout: 5 # 5 seconds
    applicationName: ""
    password:
      secret: gitlab-postgres-credential-v1
      key: secret

  ## doc/charts/globals.md#configure-redis-settings
  redis:
    password:
      enabled: true
      secret: gitlab-redis-credential-v1
      key: secret

  ## doc/charts/globals.md#configure-gitaly-settings
  gitaly:
    enabled: false
    authToken:
      secret: gitlab-gitaly-credential-v1
      key: secret
    internal:
      names: []
    external: []

  ## doc/charts/globals.md#configure-minio-settings
  minio:
    enabled: false

  ## doc/charts/globals.md#configure-appconfig-settings
  ## Rails based portions of this chart share many settings
  appConfig:
    ## doc/charts/globals.md#general-application-settings
    webhookTimeout: 10
    gitlab_kas:
      enabled: true
      internalUrl: grpc://kas.int.{{ .Values | getOrNil "env_prefix" }}.gitlab.net:8153
      secret: gitlab-kas-credential-v1

    ## doc/charts/globals.md#cron-jobs-related-settings
    cron_jobs:
      stuck_ci_jobs_worker:
        cron: "0 * * * *"
      pipeline_schedule_worker:
        cron: "*/5 * * * *"
      repository_check_worker:
        cron: "20 * * * *"
      admin_email_worker:
        cron: "0 0 * * 0"
      repository_archive_cache_worker:
        cron: "30 * * * *"
      pages_domain_verification_cron_worker:
        cron: "*/15 * * * *"
      schedule_migrate_external_diffs_worker:
        cron: "15 * * * *"
      # An override is set here due to https://gitlab.com/gitlab-com/gl-infra/production/-/issues/3288
      # Proposed improvement in https://gitlab.com/gitlab-org/gitlab/-/issues/296874
      schedule_merge_request_cleanup_refs_worker:
        cron: '1 1 1 1 *'

    ## doc/charts/globals.md#lfs-artifacts-uploads-packages-external-mr-diffs
    lfs:
      enabled: true
      connection:
        secret: gitlab-object-storage-v1
        key: gitlab-object-storage.yml
    artifacts:
      proxy_download: false
      connection:
        secret: gitlab-object-storage-v1
        key: gitlab-object-storage.yml
    uploads:
      enabled: true
      connection:
        secret: gitlab-object-storage-v1
        key: gitlab-object-storage.yml
    packages:
      enabled: true
      connection:
        secret: gitlab-object-storage-v1
        key: gitlab-object-storage.yml
    externalDiffs:
      enabled: false
      connection:
        secret: gitlab-object-storage-v1
        key: gitlab-object-storage.yml
    terraformState:
      enabled: false
      connection:
        secret: gitlab-object-storage-v1
        key: gitlab-object-storage.yml
    dependencyProxy:
      enabled: false
      proxy_download: false
      connection:
        secret: gitlab-object-storage-v1
        key: gitlab-object-storage.yml

    ## doc/charts/globals.md#incoming-email-settings
    ## doc/installation/deployment.md#incoming-email
    incomingEmail:
      enabled: true
      password:
        secret: gitlab-mailroom-imap-v1
        key: incoming_email_password
      expungeDeleted: true

    sentry:
      enabled: true

    serviceDeskEmail:
      password:
        secret: gitlab-mailroom-imap-v1
        key: service_desk_email_password
      expungeDeleted: true

    ## doc/charts/globals.md#omniauth
    omniauth:
      enabled: true
      blockAutoCreatedUsers: false
      allowSingleSignOn: true
  ## End of global.appConfig

  email:
    reply_to: noreply@gitlab.com

  serviceAccount:
    enabled: true

  ## doc/charts/globals.md#configure-gitlab-shell-settings
  shell:
    authToken:
      secret: gitlab-shell-credential-v1
      key: secret
    hostKeys:
      secret: gitlab-hostkeys-v1

  ## Rails application secrets
  ## Secret created according to doc/installation/secrets.md#gitlab-rails-secret
  ## If allowing shared-secrets generation, this is OPTIONAL.
  railsSecrets:
    secret: gitlab-rails-secret-v1

  ## doc/charts/globals.md#configure-registry-settings
  registry:
    authEndPoint: {{ env "GITLAB_ENDPOINT" | default (.Values | getOrNil "gitlab_endpoint") }}
    certificate:
      secret: registry-certificate-v1
    httpSecret:
      secret: registry-httpsecret-v1
    notificationSecret:
      secret: gitlab-registry-notification-v1
    notifications:
      endpoints:
        - name: gitlab
          backoff: 1s
          headers:
            Authorization:
              secret: gitlab-registry-authorization-header-v1
              key: secret
          ignore:
            actions:
              - pull
          ignoredmediatypes:
            - application/octet-stream
          threshold: 5
          timeout: 500ms
          url: {{ env "GITLAB_ENDPOINT" | default (.Values | getOrNil "gitlab_endpoint") }}/api/v4/container_registry_event/events

  ## doc/installation/deployment.md#outgoing-email
  ## Outgoing email server settings
  smtp:
    address: smtp.mailgun.org
    enabled: true
    port: 2525
    user_name: ""
    ## doc/installation/secrets.md#smtp-password
    password:
      secret: gitlab-smtp-credential-v1
      key: secret
    pool: true
    starttls_auto: true

  ## doc/installation/secrets.md#gitlab-workhorse-secret
  workhorse:
    secret: gitlab-workhorse-credential-v1
    key: secret

  ## doc/charts/globals.md#custom-certificate-authorities
  # configuration of certificates container & custom CA injection
  certificates:
    image:
      repository: dev.gitlab.org:5005/gitlab/charts/components/images/alpine-certificates
    customCAs:
      - secret: gitlab-gitaly-tls-certificate-v1
      - secret: gitlab-praefect-tls-certificate-v1

  ## doc/charts/globals.md#busybox-image
  busybox:
    image:
      repository: busybox

## End of global

certmanager:
  install: false

## doc/charts/nginx/index.md
## doc/architecture/decisions.md#nginx-ingress
## Installation & configuration of charts/nginx
nginx-ingress:
  common:
    labels:
      deployment: gitlab-nginx
      shard: default
      stage: main
      type: nginx
  enabled: {{ (.Values | getOrNil "nginx-ingress.enabled") | default "false" }}
  controller:
    image:
      repository: k8s.gcr.io/ingress-nginx/controller
    terminationGracePeriodSeconds: 120
    config:
      upstream-keepalive-timeout: "30"
      upstream-keepalive-requests: "0"
      compute-full-forwarded-for: "true"
      use-forwarded-headers: "true"
    lifecycle:
      preStop:
        exec:
          command: ["/bin/sh", "-c", "sleep 5; /usr/sbin/nginx -c /etc/nginx/nginx.conf -s quit; while pgrep -x nginx; do sleep 1; done"]
    service:
      annotations:
        cloud.google.com/load-balancer-type: Internal
    resources:
      requests:
        cpu: 300m
        memory: 500Mi
    autoscaling:
      enabled: true
      minReplicas: 3
      maxReplicas: 100
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    maxUnavailable: 5%
    sysctls:
      "net.ipv4.ip_local_port_range": "11000 65500"
  defaultBackend:
    image:
      repository: k8s.gcr.io/defaultbackend-amd64

## Installation & configuration of stable/prometheus
## See requirements.yaml for current version
prometheus:
  install: false

## Configuration of Redis
## doc/architecture/decisions.md#redis
## doc/charts/redis
redis:
  install: false

## Instllation & configuration of stable/prostgresql
## See requirements.yaml for current version
postgresql:
  install: false

## Installation & configuration charts/registry
## doc/architecture/decisions.md#registry
## doc/charts/registry/
registry:
  enabled: {{ .Values.registry.enabled }}
  common:
    labels:
      type: registry
      deployment: registry
  image:
    # `tag` is set via init-values.yaml.gotmpl
    # tag:
    repository: dev.gitlab.org:5005/gitlab/charts/components/images/gitlab-container-registry
    pullSecrets:
      - name: dev-registry-access-v1
  draintimeout: '60s'
  deployment:
    readinessProbe:
      # TODO: Consider removal after https://gitlab.com/gitlab-org/container-registry/issues/37
      initialDelaySeconds: 40
  networkpolicy:
    enabled: true
    egress:
      enabled: true
      # The following rules enable traffic to all external
      # endpoints, except the metadata service and the local
      # network (except DNS and DB requests)
      rules:
      - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
        # cloudsql in pre
        - port: 5432
          protocol: TCP
        # pgbouncer in gstg and gprd
        - port: 6432
          protocol: TCP
      - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
            - 10.0.0.0/8
            - 169.254.169.254/32
  resources:
    limits:
      memory: 3G
    requests:
      cpu: 300m
  hpa:
    cpu:
      targetAverageUtilization: 70
  maxUnavailable: 1
  debug:
    prometheus:
      enabled: true
  log:
    formatter: json
    accesslog:
      formatter: json
  service:
    type: LoadBalancer
    annotations:
      cloud.google.com/load-balancer-type: Internal
  storage:
    secret: registry-storage-v1
    key: config
    extraKey: gcs.json
  tokenIssuer: omnibus-gitlab-issuer
  health:
    storagedriver:
      enabled: true
  profiling:
    stackdriver:
      enabled: true
  serviceAccount:
    create: true
    annotations:
      iam.gke.io/gcp-service-account: gitlab-registry@{{ .Values.google_project }}.iam.gserviceaccount.com
  reporting:
    sentry:
      enabled: true
      dsn: https://a40e1c5a81e0448094930f5680fe2e49@sentry.gitlab.net/122
      environment: {{ .Values | getOrNil "env_prefix" }}

## Automatic shared secret generation
## doc/installation/secrets.md
## doc/charts/shared-secrets
shared-secrets:
  enabled: false

upgradeCheck:
  enabled: false

## Installation & configuration of gitlab/gitlab-runner
## See requirements.yaml for current version
gitlab-runner:
  install: false

## Settings for individual sub-charts under GitLab
## Note: Many of these settings are configurable via globals
gitlab:
  # doc/charts/gitlab/gitlab-pages
  gitlab-pages:
    common:
      labels:
        deployment: web-pages
        type: web-pages
    deployment:
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 0
    maxUnavailable: 1
    extraEnv:
      GITLAB_CONTINUOUS_PROFILING: "stackdriver?service=gitlab-pages"
      FF_HANDLE_CACHE_HEADERS: "true"
      FF_ENABLE_REDIRECTS: "true"
      FF_ENABLE_PLACEHOLDERS: "true"
      FF_ENFORCE_IP_TLS_RATE_LIMITS: "true"
      FF_ENFORCE_DOMAIN_TLS_RATE_LIMITS: "true"
      FF_ENFORCE_IP_RATE_LIMITS: "true"
      FF_ENFORCE_DOMAIN_RATE_LIMITS: "true"
    zipCache:
      expiration: 300s
    headers:
      - "Permissions-Policy: interest-cohort=()"
    image:
      repository: dev.gitlab.org:5005/gitlab/charts/components/images/gitlab-pages
      pullSecrets:
        - name: dev-registry-access-v1
    internalGitlabServer: "http://{{ .Release.Name }}-webservice-api.{{ .Release.Name }}.svc:8181"
    networkpolicy:
      enabled: true
      egress:
        enabled: true
        rules:
        - to:
          - ipBlock:
              cidr: 10.0.0.0/8
          ports:
          - port: 53
            protocol: UDP
          - port: 53
            protocol: TCP
          - port: 8181
            protocol: TCP
        - to:
          - ipBlock:
              cidr: 0.0.0.0/0
              except:
              - 10.0.0.0/8
              - 169.254.169.254/32
    propagateCorrelationId: true
    rateLimitSourceIP: 20
    rateLimitSourceIPBurst: 300
    rateLimitDomain: 100
    rateLimitDomainBurst: 500
    rateLimitTLSSourceIP: 20
    rateLimitTLSSourceIPBurst: 50
    rateLimitTLSDomain: 30
    rateLimitTLSDomainBurst: 100
    sentry:
      enabled: true
      dsn: https://11221aa4bbdf40f3ad857b8959012b23@sentry.gitlab.net/104
      environment: {{ .Environment.Values | getOrNil "env_prefix" }}
    service:
      annotations:
        cloud.google.com/load-balancer-type: Internal
    serviceAccount:
      annotations:
        iam.gke.io/gcp-service-account: gitlab-gitlab-pages@{{ .Values.google_project }}.iam.gserviceaccount.com
    useHTTPProxy: true
    useProxyV2: true

  # doc/charts/gitlab/gitlab-shell
  gitlab-shell:
    deployment:
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 0
    extraEnv:
      USE_GITLAB_LOGGER: 1
    workhorse:
      # This is the internal API endpoint for GitLab Shell
      # Currently we are using the same deployments that is
      # used for https Git. Once we have a dedicated API deployment
      # we may want to use that instead
      # https://gitlab.com/gitlab-com/gl-infra/delivery/-/issues/1401
      serviceName: webservice-git
    service:
      annotations:
        cloud.google.com/load-balancer-type: Internal
      type: LoadBalancer
    config:
      # https://gitlab.com/gitlab-com/gl-infra/infrastructure/-/issues/13548
      clientAliveInterval: 30
      maxStartups:
        full: 400
        rate: 60
        start: 200
    enabled: {{ index .Values.gitlab "gitlab-shell" "enabled" }}
    global:
      shell:
        port: 2222
    resources:
      requests:
        cpu: 1
        memory: 1G
      limits:
        memory: 1G
    hpa:
      cpu:
        targetAverageValue: 800m
    maxUnavailable: 1
    image:
      repository: dev.gitlab.org:5005/gitlab/charts/components/images/gitlab-shell
      pullSecrets:
        - name: dev-registry-access-v1
    logging:
      format: "json"
    common:
      labels:
        deployment: gitlab-shell
        type: git

  # doc/charts/gitlab/migrations
  migrations:
    enabled: false

  # doc/charts/gitlab/webservice
  webservice:
    extraEnvFrom:
      GITLAB_THROTTLE_USER_ALLOWLIST:
        secretKeyRef:
          name: gitlab-throttle-user-allowlist-v1
          key: GITLAB_THROTTLE_USER_ALLOWLIST
      GITLAB_UPLOAD_API_ALLOWLIST:
        secretKeyRef:
          name: gitlab-upload-api-allowlist-v1
          key: GITLAB_UPLOAD_API_ALLOWLIST
      GITLAB_GRAFANA_API_KEY:
        secretKeyRef:
          name: gitlab-grafana-api-key-v1
          key: GITLAB_GRAFANA_API_KEY
      SUBSCRIPTION_PORTAL_ADMIN_EMAIL:
        secretKeyRef:
          name: gitlab-subscription-portal-admin-email-v1
          key: SUBSCRIPTION_PORTAL_ADMIN_EMAIL
      SUBSCRIPTION_PORTAL_ADMIN_TOKEN:
        secretKeyRef:
          name: gitlab-subscription-portal-admin-token-v1
          key: SUBSCRIPTION_PORTAL_ADMIN_TOKEN
      ARKOSE_LABS_PRIVATE_KEY:
        secretKeyRef:
          name: gitlab-arkose-labs-private-key-v1
          key: ARKOSE_LABS_PRIVATE_KEY
      ARKOSE_LABS_PUBLIC_KEY:
        secretKeyRef:
          name: gitlab-arkose-labs-public-key-v1
          key: ARKOSE_LABS_PUBLIC_KEY
    deployments:
      api:
        common:
          labels:
            type: api
        deployment:
          terminationGracePeriodSeconds: 65
        extraEnv:
          GITLAB_CONTINUOUS_PROFILING: stackdriver?service=workhorse-api
          GITLAB_SENTRY_EXTRA_TAGS: "{\"type\": \"api\", \"stage\": \"main\"}"
          ENABLE_RAILS_61_CONNECTION_HANDLING: "true"
        shutdown:
          blackoutSeconds: 10
        ingress:
          enabled: true
          annotations:
            nginx.ingress.kubernetes.io/proxy-buffering: "on"
            nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
            nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
            nginx.ingress.kubernetes.io/proxy-request-buffering: "on"
          path: "/api"
        pod:
          labels:
            deployment: api
            type: api
        service:
          type: LoadBalancer
          loadBalancerSourceRanges:
            - 10.0.0.0/8
          annotations:
            cloud.google.com/load-balancer-type: Internal
        workhorse:
          # This will need to be set here until https://gitlab.com/gitlab-org/charts/gitlab/-/issues/2365
          # is resolved
          extraArgs: '-apiLimit 9 -apiQueueDuration 30s -apiQueueLimit 2000 -apiCiLongPollingDuration 50s -propagateCorrelationID'
        workerProcesses: 6
      web:
        common:
          labels:
            type: web
        deployment:
          terminationGracePeriodSeconds: 65
        sshHostKeys:
          mount: true
        workhorse:
          keywatcher: false
        extraEnv:
          ENABLE_RBTRACE: 1
          GITLAB_CONTINUOUS_PROFILING: stackdriver?service=workhorse-web
          GITLAB_SENTRY_EXTRA_TAGS: "{\"type\": \"web\", \"stage\": \"main\"}"
          ENABLE_RAILS_61_CONNECTION_HANDLING: "true"
        sharedTmpDir:
          sizeLimit: 10G
        shutdown:
          blackoutSeconds: 10
        ingress:
          enabled: true
          annotations:
            nginx.ingress.kubernetes.io/proxy-buffering: "on"
            nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
            nginx.ingress.kubernetes.io/proxy-request-buffering: "on"
          path: '/'
        pod:
          labels:
            deployment: web
            type: web
        service:
          type: LoadBalancer
          loadBalancerSourceRanges:
            - 10.0.0.0/8
          annotations:
            cloud.google.com/load-balancer-type: Internal
        workerProcesses: 4
      websockets:
        deployment:
          terminationGracePeriodSeconds: 260
        workhorse:
          keywatcher: false
        common:
          labels:
            type: websockets
        extraEnv:
          GITLAB_CONTINUOUS_PROFILING: stackdriver?service=workhorse-websockets
          GITLAB_SENTRY_EXTRA_TAGS: "{\"type\": \"websockets\", \"stage\": \"main\"}"
          # See https://gitlab.com/gitlab-org/gitlab-workhorse/-/issues/352
          GODEBUG: madvdontneed=1
          ENABLE_RAILS_61_CONNECTION_HANDLING: "true"
        service:
          type: LoadBalancer
          loadBalancerSourceRanges:
            - 10.0.0.0/8
          annotations:
            cloud.google.com/load-balancer-type: Internal
        shutdown:
          blackoutSeconds: 0
        ingress:
          path:
        pod:
          labels:
            deployment: websockets
      git:
        deployment:
          terminationGracePeriodSeconds: 260
        workhorse:
          keywatcher: false
        common:
          labels:
            type: git
        extraEnv:
          GITLAB_CONTINUOUS_PROFILING: stackdriver?service=workhorse-git
          GITLAB_SENTRY_EXTRA_TAGS: "{\"type\": \"git\", \"stage\": \"main\"}"
          ENABLE_RAILS_61_CONNECTION_HANDLING: "true"
        shutdown:
          blackoutSeconds: 240
        service:
          type: LoadBalancer
          loadBalancerSourceRanges:
            - 10.0.0.0/8
          annotations:
            cloud.google.com/load-balancer-type: Internal
        ingress:
          path:
        pod:
          labels:
            deployment: git-https
    extraInitContainers: |
      - name: write-instance-name
        args:
          - -c
          - echo "$INSTANCE_NAME" > /etc/gitlab/instance_name
        command:
          - sh
        env:
          - name: INSTANCE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
        image: 'busybox:latest'
        volumeMounts:
          - mountPath: /etc/gitlab
            name: webservice-secrets
    workerProcesses: 4
    enabled: {{ .Values.gitlab.webservice.enabled }}
    registry:
      tokenIssuer: omnibus-gitlab-issuer
    deployment:
      strategy:
        rollingUpdate:
          maxSurge: 20%
          maxUnavailable: 0
      readinessProbe:
        # This value is set to 60 to see if we can reduce queuing on pod start,
        # see https://gitlab.com/gitlab-com/gl-infra/delivery/-/issues/1294
        # for details
        initialDelaySeconds: 60
        failureThreshold: 2
        periodSeconds: 2
    serviceAccount:
      annotations:
        iam.gke.io/gcp-service-account: gitlab-webservice@{{ .Values.google_project }}.iam.gserviceaccount.com
    serviceLabels:
      railsPromJob: gitlab-rails
      workhorsePromJob: gitlab-workhorse
    trusted_proxies: ['10.0.0.0/8']
    monitoring:
      ipWhitelist:
        - "10.0.0.0/8"
        - "127.0.0.0/8"
        - "169.254.169.252/24"
      exporter:
        enabled: true
    ingress:
      enabled: true
      annotations:
        ## This is disabled for webservice for git-https traffic
        ## See https://gitlab.com/gitlab-org/charts/gitlab/-/issues/2262 and
        ##     https://gitlab.com/gitlab-com/gl-infra/delivery/-/issues/1146
        ##
        ## https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/
        nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
        nginx.ingress.kubernetes.io/proxy-connect-timeout: 300
        nginx.ingress.kubernetes.io/proxy-read-timeout: 3600
        {{- if (.Values | getOrNil "nginx_ingress_server_alias") | default false }}
        nginx.ingress.kubernetes.io/server-alias: {{ .Values | getOrNil "nginx_ingress_server_alias" }}
        {{- end }}
      proxyBodySize: 0
    rack_attack:
      git_basic_auth:
        enabled: true
        maxretry: 30
        findtime: 180
        bantime: 3600
    image:
      repository: dev.gitlab.org:5005/gitlab/charts/components/images/gitlab-webservice-ee
      pullSecrets:
      - name: dev-registry-access-v1
    networkpolicy:
      enabled: true
      egress:
        enabled: true
        # The following rules enable traffic to all external
        # endpoints, except the metadata service and the local
        # network (except DNS, gitaly, redis and postgres)
        rules:
          # Allow all traffic except internal network and metadata service
        - to:
          - ipBlock:
              cidr: 0.0.0.0/0
              except:
              - 10.0.0.0/8
              - 169.254.169.254/32
          # Allow internal traffic to consul for consul DNS
        - to:
          - namespaceSelector: {}
            podSelector:
              matchLabels:
                app: consul
          ports:
          - port: 8600
            protocol: TCP
          - port: 8600
            protocol: UDP
          # Allow internal traffic for DNS
        - to:
          - ipBlock:
              cidr: 10.0.0.0/8
          ports:
          - port: 53
            protocol: UDP
          - port: 53
            protocol: TCP

          # Allow internal traffic to Container Registry
        - to:
          - ipBlock:
              cidr: 10.0.0.0/8
          ports:
          - port: 5000
            protocol: TCP

          # Allow internal traffic from API nodes to Kas
        - to:
          - ipBlock:
              cidr: 10.0.0.0/8
          ports:
          - port: 8153
            protocol: TCP

          # Allow internal traffic to Redis
        - to:
          - ipBlock:
              cidr: 10.0.0.0/8
          ports:
            # pre Memorystore instance
          - port: 6379
            protocol: TCP
            # gstg, gprd Redis
          - port: 26379
            protocol: TCP

          # Allow internal traffic to Postgresql
        - to:
          - ipBlock:
              cidr: 10.0.0.0/8
          ports:
            # pre CloudSQL
          - port: 5432
            protocol: TCP
            # gstg, gprd pgbouncer
          - port: 6432
            protocol: TCP
          - port: 6433
            protocol: TCP
          - port: 6434
            protocol: TCP
          - port: 6435
            protocol: TCP
          - port: 6436
            protocol: TCP
          - port: 6437
            protocol: TCP

          # Allow internal traffic to Gitaly
        - to:
          - ipBlock:
              cidr: 10.0.0.0/8
          ports:
          # Gitaly non-TLS
          - port: 9999
            protocol: TCP
          # Gitaly TLS
          - port: 9998
            protocol: TCP
          # Praefect
          - port: 2305
            protocol: TCP

    puma:
      disableWorkerKiller: true
      threads:
        min: 1
        max: 4
    workhorse:
      # This will need to be set here until https://gitlab.com/gitlab-org/charts/gitlab/-/issues/2365
      # is resolved
      extraArgs: '-apiLimit 5 -apiQueueDuration 60s -apiQueueLimit 200 -propagateCorrelationID'
      image: dev.gitlab.org:5005/gitlab/charts/components/images/gitlab-workhorse-ee
      imageScaler:
        maxProcs: 8
        maxFileSizeBytes: 250000
      resources:
        limits:
          memory: 2G
        requests:
          cpu: 600m
          memory: 200M
      monitoring:
        exporter:
          enabled: true
      trustedCIDRsForPropagation: ["10.0.0.0/8", "127.0.0.1/32"]
      trustedCIDRsForXForwardedFor: ["10.0.0.0/8", "127.0.0.1/32"]
    resources:
      limits:
        memory: 6.0G
      requests:
        cpu: 4
        memory: 5G
    hpa:
      cpu:
        targetAverageValue: 1600m
    minReplicas: 2
    maxReplicas: 10
    maxUnavailable: 1
    extraEnv:
      ACTION_CABLE_IN_APP: "true"
      BYPASS_SCHEMA_VERSION: "true"
      STACKPROF_ENABLED: "true"
      UNSTRUCTURED_RAILS_LOG: "false"
      USE_GITLAB_LOGGER: 1
      GITLAB_MEMORY_WATCHDOG_ENABLED: "true"
      GITLAB_MEMWD_MAX_HEAP_FRAG: 0.3

  # doc/charts/gitlab/sidekiq
  sidekiq:
    enabled: {{ .Values.gitlab.sidekiq.enabled }}
    trusted_proxies: ['10.0.0.0/8']
    queueSelector: true
    memoryKiller:
      maxRss: 0
    image:
      repository: dev.gitlab.org:5005/gitlab/charts/components/images/gitlab-sidekiq-ee
      pullSecrets:
      - name: dev-registry-access-v1
    metrics:
      port: 8083
    health_checks:
      port: 8092
    logging:
      format: "json"
    extraEnv:
      BYPASS_SCHEMA_VERSION: "true"
      STACKPROF_ENABLED: "true"
      # This will enables logs for sidekiq args
      # and does not yet have explicit support in
      # the GitLab chart
      # https://gitlab.com/gitlab-org/charts/gitlab/-/issues/2100
      SIDEKIQ_LOG_ARGUMENTS: "1"
      USE_GITLAB_LOGGER: 1
      ENABLE_RAILS_61_CONNECTION_HANDLING: "true"
    extraEnvFrom:
      SUBSCRIPTION_PORTAL_ADMIN_EMAIL:
        secretKeyRef:
          name: gitlab-subscription-portal-admin-email-v1
          key: SUBSCRIPTION_PORTAL_ADMIN_EMAIL
      SUBSCRIPTION_PORTAL_ADMIN_TOKEN:
        secretKeyRef:
          name: gitlab-subscription-portal-admin-token-v1
          key: SUBSCRIPTION_PORTAL_ADMIN_TOKEN
    networkpolicy:
      enabled: true
      egress:
        enabled: true
        # The following rules enable traffic to all external
        # endpoints, except the metadata service and the local
        # network (except DNS, gitaly, redis and postgres)
        rules:
          # Allow all traffic except internal network and metadata service
        - to:
          - ipBlock:
              cidr: 0.0.0.0/0
              except:
              - 10.0.0.0/8
              - 169.254.169.254/32
          # Allow internal traffic to consul for consul DNS
        - to:
          - namespaceSelector: {}
            podSelector:
              matchLabels:
                app: consul
          ports:
          - port: 8600
            protocol: TCP
          - port: 8600
            protocol: UDP
          # Allow internal traffic for DNS
        - to:
          - ipBlock:
              cidr: 10.0.0.0/8
          ports:
          - port: 53
            protocol: UDP
          - port: 53
            protocol: TCP

          # Allow internal traffic to Redis
        - to:
          - ipBlock:
              cidr: 10.0.0.0/8
          ports:
            # pre Memorystore instance
          - port: 6379
            protocol: TCP
            # gstg, gprd Redis
          - port: 26379
            protocol: TCP

          # Allow internal traffic to Postgresql
        - to:
          - ipBlock:
              cidr: 10.0.0.0/8
          ports:
            # pre CloudSQL
          - port: 5432
            protocol: TCP
            # gstg, gprd pgbouncer
          - port: 6432
            protocol: TCP
          - port: 6433
            protocol: TCP
          - port: 6434
            protocol: TCP
          - port: 6435
            protocol: TCP
          - port: 6436
            protocol: TCP
          - port: 6437
            protocol: TCP

          # Allow internal traffic to Gitaly
        - to:
          - ipBlock:
              cidr: 10.0.0.0/8
          ports:
          # Gitaly non-TLS
          - port: 9999
            protocol: TCP
          # Gitaly TLS
          - port: 9998
            protocol: TCP
          # Praefect
          - port: 2305
            protocol: TCP

          # Allow internal traffic to Container Registry
        - to:
          - ipBlock:
              cidr: 10.0.0.0/8
          ports:
          # Container Registry
          - port: 5000
            protocol: TCP

    common:
      labels:
        type: sidekiq

    hpa:
      # Changed from default for urgent-other
      # https://gitlab.com/gitlab-com/gl-infra/production/-/issues/2254#note_358815700
      cpu:
        targetAverageValue: 450m

    maxUnavailable: 1

    registry:
      api:
        protocol: "https"
        port: 443
        host: {{ .Values.registry_api_host }}
      tokenIssuer: omnibus-gitlab-issuer
    trusted_proxies:
      - 10.0.0.0/8

  # doc/charts/gitlab/gitlab-exporter
  gitlab-exporter:
    enabled: false

  # doc/charts/gitlab/mailroom
  mailroom:
    enabled: {{ .Values.gitlab.mailroom.enabled }}
    common:
      labels:
        deployment: mailroom
        type: mailroom
    networkpolicy:
      enabled: true
      egress:
        enabled: true
        rules:
          # Allow DNS
          - to:
              - ipBlock:
                  cidr: 10.0.0.0/8
            ports:
              - port: 53
                protocol: UDP
              - port: 53
                protocol: TCP

          # Allow IMAP
          - to:
              - ipBlock:
                  cidr: 0.0.0.0/0
                  except:
                    - 10.0.0.0/8
            ports:
              - port: 993
                protocol: TCP

          # Allow Redis
          - to:
              - ipBlock:
                  cidr: 10.0.0.0/8
            ports:
              # pre Memorystore instance
              - port: 6379
                protocol: TCP

              # gstg, gprd
              - port: 26379
                protocol: TCP

          # Allow talking to our internal API endpoints
          - to:
            - ipBlock:
                cidr: 10.0.0.0/8
            ports:
            - port: 443
              protocol: TCP
            - port: 11443
              protocol: TCP
            - port: 8181
              protocol: TCP

  # doc/charts/gitlab/kas
  kas:
    global:
      ingress:
        class: none # Must be set to `none` otherwise, defaults to `gitlab-nginx`; we want to use the default for GKE, which is the GCE Ingress class
    image:
      pullSecrets:
        - name: dev-registry-access-v1
      repository: dev.gitlab.org:5005/gitlab/charts/components/images/gitlab-kas
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.global-static-ip-name: kas-gke-{{ .Values | getOrNil "env_prefix" }}
        networking.gke.io/managed-certificates: {{ .Values | getOrNil "kas.managed_cert_name" }}
      tls:
        secretName: ""
    customConfig:
      agent:
        listen:
          connections_per_token_per_minute: 10000
      gitaly:
        global_api_rate_limit:
          refill_rate_per_second: 30.0
          bucket_size: 70
        per_server_api_rate_limit:
          refill_rate_per_second: 15.0
          bucket_size: 40
    common:
      labels:
        type: kas
        deployment: kas
    deployment:
      minReadySeconds: 60
    service:
      type: LoadBalancer
      loadBalancerSourceRanges:
        - 10.0.0.0/8
      annotations:
        networking.gke.io/v1beta1.FrontendConfig: "kas-http-frontendconfig"
        cloud.google.com/load-balancer-type: Internal
        cloud.google.com/neg: '{"ingress": true}'
        cloud.google.com/backend-config: '{"default": "kas-http-backendconfig"}'
    serviceAccount:
      annotations:
        iam.gke.io/gcp-service-account: gitlab-kas@{{ .Values.google_project }}.iam.gserviceaccount.com

    privateApi:
      secret: gitlab-kas-private-api-credential-v1
    resources:
      requests:
        cpu: 100m
        memory: 100M
      limits:
        cpu: 500m
        memory: 256M
    maxUnavailable: 1
    networkpolicy:
      enabled: true
      egress:
        enabled: true
        rules:
          # Disables all outgoing traffic except to specific ports on the internal network
          # Allow internal traffic for DNS
          - to:
            - ipBlock:
                cidr: 10.0.0.0/8
            ports:
            - port: 53
              protocol: UDP
            - port: 53
              protocol: TCP
          # Allow talking to our internal API endpoints
          - to:
            - ipBlock:
                cidr: 10.0.0.0/8
            ports:
            # int.{gprd,pre}.gitlab.net
            - port: 443
              protocol: TCP
            # int.{gstg}.gitlab.net
            - port: 11443
              protocol: TCP
          # Allow internal traffic to Gitaly
          - to:
            - ipBlock:
                cidr: 10.0.0.0/8
            ports:
            # Gitaly non-TLS
            - port: 9999
              protocol: TCP
            # Gitaly TLS
            - port: 9998
              protocol: TCP
            # Praefect
            - port: 2305
              protocol: TCP
          # Allow internal traffic to Redis
          - to:
            - ipBlock:
                cidr: 10.0.0.0/8
            ports:
              # pre Memorystore instance
            - port: 6379
              protocol: TCP
              # gstg, gprd Redis
            - port: 26379
              protocol: TCP
          # Allow all outgoing HTTPS/443
          - ports:
            - port: 443
              protocol: TCP
          # GKE metadata - https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity#pod_cant_authenticate_to
          - to:
            - ipBlock:
                cidr: 169.254.169.252/32
            ports:
            - port: 988
              protocol: TCP
          # KAS internal traffic
          - to:
            - podSelector:
                matchLabels:
                  app: kas
            ports:
            - port: 8155
              protocol: TCP

  # doc/charts/gitlab/toolbox
  toolbox:
    backups:
      objectStorage:
        config:
          # This is a required configuration despite being disabled
          # setting it to fake empty values, otherwise our chart fails
          secret: empty
          key: empty
    enabled: false
