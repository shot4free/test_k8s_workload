---

# Generated by "make generate-ci-config"
# Do not edit!!

.gprd:
  environment:
    name: gprd
  extends:
    - .gprd-base
  resource_group: gprd
  variables:
    CLUSTER: gprd-gitlab-gke
    REGION: us-east1
.gprd-base:
  environment:
    url: https://gitlab.com
  variables:
    PROJECT: gitlab-production
.gprd-us-east1-b:
  environment:
    name: gprd-us-east1-b
  extends:
    - .gprd-base
  resource_group: gprd-us-east1-b
  variables:
    CLUSTER: gprd-us-east1-b
    REGION: us-east1-b
.gprd-us-east1-c:
  environment:
    name: gprd-us-east1-c
  extends:
    - .gprd-base
  resource_group: gprd-us-east1-c
  variables:
    CLUSTER: gprd-us-east1-c
    REGION: us-east1-c
.gprd-us-east1-d:
  environment:
    name: gprd-us-east1-d
  extends:
    - .gprd-base
  resource_group: gprd-us-east1-d
  variables:
    CLUSTER: gprd-us-east1-d
    REGION: us-east1-d
.gstg:
  environment:
    name: gstg
  extends:
    - .gstg-base
  resource_group: gstg
  variables:
    CLUSTER: gstg-gitlab-gke
    REGION: us-east1
.gstg-base:
  environment:
    url: https://staging.gitlab.com
  variables:
    PROJECT: gitlab-staging-1
.gstg-us-east1-b:
  environment:
    name: gstg-us-east1-b
  extends:
    - .gstg-base
  resource_group: gstg-us-east1-b
  variables:
    CLUSTER: gstg-us-east1-b
    REGION: us-east1-b
.gstg-us-east1-c:
  environment:
    name: gstg-us-east1-c
  extends:
    - .gstg-base
  resource_group: gstg-us-east1-c
  variables:
    CLUSTER: gstg-us-east1-c
    REGION: us-east1-c
.gstg-us-east1-d:
  environment:
    name: gstg-us-east1-d
  extends:
    - .gstg-base
  resource_group: gstg-us-east1-d
  variables:
    CLUSTER: gstg-us-east1-d
    REGION: us-east1-d
.only-auto-deploy-false:
  only:
    variables:
      - $AUTO_DEPLOY == "false" && $CI_PIPELINE_SOURCE != "schedule"
.only-auto-deploy-false-and-config-changes:
  only:
    changes:
      - vendor/charts/gitlab/**/*
      - bases/**/*
      - bin/**/*
      - releases/**/*
      - '*.yaml'
      - '*.yml'
      - .gitlab-ci.yml
    variables:
      - $AUTO_DEPLOY == "false" && $CI_PIPELINE_SOURCE != "schedule"
.pre:
  environment:
    name: pre
  extends:
    - .pre-base
  resource_group: pre
  variables:
    CLUSTER: pre-gitlab-gke
.pre-base:
  environment:
    name: pre
    url: https://pre.gitlab.com
  variables:
    PROJECT: gitlab-pre
    REGION: us-east1
.trigger-qa-smoke:
  except:
    refs:
      - tags
    variables:
      - $CI_API_V4_URL == "https://gitlab.com/api/v4"
      - $CI_COMMIT_REF_NAME != 'master'
  extends:
    - .except-com
    - .only-auto-deploy-false-and-config-changes
  image: alpine:3.12.0
  script: |
    if [[ $SKIP_QA == "true" ]]; then
      echo "Skipping QA because SKIP_QA is set to true"
      exit 0
    fi
    apk add curl jq
    # project=full/path/to/project
    echo "Sending trigger to $project"
    # URL encode the project
    project=$(echo -n "$project" | jq -sRr @uri)
    trigger_url="$CI_API_V4_URL/projects/$project/trigger/pipeline"
    resp=$(curl -s --request POST --form "variables[SMOKE_ONLY]=true" --form "token=$CI_JOB_TOKEN" --form ref=master $trigger_url)
    id=$(echo "$resp" | jq -r ".id")
    web_url=$(echo "$resp" | jq -r ".web_url")
    echo "Waiting for pipeline $web_url ..."
    status_url="$CI_API_V4_URL/projects/$project/pipelines/$id"
    for retry in $(seq 1 120); do
      resp=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_OPS_API_TOKEN" "$status_url")
      status=$(echo "$resp" | jq -r '.status')
      echo "Got pipeline status $status, retry $retry/10"
      [[ $status == "success" || $status == "failed" || $status == "canceled" ]] && break
      sleep 30
    done
    if [[ $status != "success" ]]; then
      echo "$web_url has status $status, failing"
      exit 1
    fi
assert_formatting:
  except:
    variables:
      - $CI_API_V4_URL == "https://ops.gitlab.net/api/v4"
  image: ${CI_REGISTRY}/gitlab-com/gl-infra/k8s-workloads/common/k8-helm-ci:${CI_IMAGE_VERSION}
  script: |
    find . -name '*.*sonnet' | xargs -n1 jsonnetfmt -i
    git diff --exit-code
  stage: check
bundler-audit-dependency_scanning:
  stage: check
ci_config_generated:
  image: ${CI_REGISTRY}/gitlab-com/gl-infra/k8s-workloads/common/k8-helm-ci:${CI_IMAGE_VERSION}
  script: |
    make generate-ci-config
    git diff --exit-code || (echo "Please run 'make generate-ci-config'" >&2 && exit 1)
  stage: check
dependency_scanning:
  stage: check
gprd-cny:auto-deploy:
  extends:
    - .deploy
    - .gprd
  only:
    variables:
      - $ENVIRONMENT == "gprd-cny" && $DRY_RUN == "false" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  resource_group: gprd-cny
  script: |
    sendEvent "Starting k8s deployment for $CLUSTER" "gprd" "deployment" "cny"
    bin/k-ctl -s cny upgrade
    sendEvent "Finished k8s deployment for $CLUSTER" "gprd" "deployment" "cny"
  stage: gprd-cny:deploy
gprd-cny:dryrun:
  extends:
    - .deploy
    - .gprd
    - .only-auto-deploy-false-and-config-changes
  resource_group: gprd-cny
  script: |
    bin/k-ctl -D -s cny upgrade
  stage: dryrun
gprd-cny:dryrun:auto-deploy:
  extends:
    - .deploy
    - .gprd
  only:
    variables:
      - $ENVIRONMENT == "gprd-cny" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  resource_group: gprd-cny
  script: |
    bin/k-ctl -D -s cny upgrade
  stage: dryrun
gprd-cny:upgrade:
  extends:
    - .deploy
    - .gprd
    - .only-auto-deploy-false-and-config-changes
  only:
    refs:
      - master
  resource_group: gprd-cny
  script: |
    bin/grafana-annotate -e $CI_ENVIRONMENT_NAME
    sendEvent "Starting k8s configuration for $CLUSTER" "gprd" "configuration" "cny"
    bin/k-ctl -s cny upgrade
    sendEvent "Finished k8s configuration for $CLUSTER" "gprd" "configuration" "cny"
  stage: gprd-cny:deploy
  variables:
    DRY_RUN: "false"
gprd-us-east1-b:auto-deploy:
  extends:
    - .deploy
    - .gprd-us-east1-b
  only:
    variables:
      - $ENVIRONMENT == "gprd" && $DRY_RUN == "false" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: "sendEvent \"Starting k8s deployment for $CLUSTER\" \"gprd\" \"deployment\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s deployment for $CLUSTER\" \"gprd\" \"deployment\" \n"
  stage: gprd:deploy:alpha
gprd-us-east1-b:dryrun:
  extends:
    - .deploy
    - .gprd-us-east1-b
    - .only-auto-deploy-false-and-config-changes
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
gprd-us-east1-b:dryrun:auto-deploy:
  extends:
    - .deploy
    - .gprd-us-east1-b
  only:
    variables:
      - $ENVIRONMENT == "gprd" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
gprd-us-east1-b:upgrade:
  extends:
    - .deploy
    - .gprd-us-east1-b
    - .only-auto-deploy-false-and-config-changes
  only:
    refs:
      - master
  script: "bin/grafana-annotate -e $CI_ENVIRONMENT_NAME\nsendEvent \"Starting k8s configuration for $CLUSTER\" \"gprd\" \"configuration\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s configuration for $CLUSTER\" \"gprd\" \"configuration\" \n"
  stage: gprd:deploy:alpha
  variables:
    DRY_RUN: "false"
gprd-us-east1-c:auto-deploy:
  extends:
    - .deploy
    - .gprd-us-east1-c
  only:
    variables:
      - $ENVIRONMENT == "gprd" && $DRY_RUN == "false" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: "sendEvent \"Starting k8s deployment for $CLUSTER\" \"gprd\" \"deployment\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s deployment for $CLUSTER\" \"gprd\" \"deployment\" \n"
  stage: gprd:deploy:beta
gprd-us-east1-c:dryrun:
  extends:
    - .deploy
    - .gprd-us-east1-c
    - .only-auto-deploy-false-and-config-changes
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
gprd-us-east1-c:dryrun:auto-deploy:
  extends:
    - .deploy
    - .gprd-us-east1-c
  only:
    variables:
      - $ENVIRONMENT == "gprd" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
gprd-us-east1-c:upgrade:
  extends:
    - .deploy
    - .gprd-us-east1-c
    - .only-auto-deploy-false-and-config-changes
  only:
    refs:
      - master
  script: "bin/grafana-annotate -e $CI_ENVIRONMENT_NAME\nsendEvent \"Starting k8s configuration for $CLUSTER\" \"gprd\" \"configuration\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s configuration for $CLUSTER\" \"gprd\" \"configuration\" \n"
  stage: gprd:deploy:beta
  variables:
    DRY_RUN: "false"
gprd-us-east1-d:auto-deploy:
  extends:
    - .deploy
    - .gprd-us-east1-d
  only:
    variables:
      - $ENVIRONMENT == "gprd" && $DRY_RUN == "false" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: "sendEvent \"Starting k8s deployment for $CLUSTER\" \"gprd\" \"deployment\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s deployment for $CLUSTER\" \"gprd\" \"deployment\" \n"
  stage: gprd:deploy:beta
gprd-us-east1-d:dryrun:
  extends:
    - .deploy
    - .gprd-us-east1-d
    - .only-auto-deploy-false-and-config-changes
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
gprd-us-east1-d:dryrun:auto-deploy:
  extends:
    - .deploy
    - .gprd-us-east1-d
  only:
    variables:
      - $ENVIRONMENT == "gprd" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
gprd-us-east1-d:upgrade:
  extends:
    - .deploy
    - .gprd-us-east1-d
    - .only-auto-deploy-false-and-config-changes
  only:
    refs:
      - master
  script: "bin/grafana-annotate -e $CI_ENVIRONMENT_NAME\nsendEvent \"Starting k8s configuration for $CLUSTER\" \"gprd\" \"configuration\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s configuration for $CLUSTER\" \"gprd\" \"configuration\" \n"
  stage: gprd:deploy:beta
  variables:
    DRY_RUN: "false"
gprd:auto-deploy:
  extends:
    - .deploy
    - .gprd
  only:
    variables:
      - $ENVIRONMENT == "gprd" && $DRY_RUN == "false" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: "sendEvent \"Starting k8s deployment for $CLUSTER\" \"gprd\" \"deployment\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s deployment for $CLUSTER\" \"gprd\" \"deployment\" \n"
  stage: gprd:deploy:alpha
gprd:dryrun:
  extends:
    - .deploy
    - .gprd
    - .only-auto-deploy-false-and-config-changes
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
gprd:dryrun:auto-deploy:
  extends:
    - .deploy
    - .gprd
  only:
    variables:
      - $ENVIRONMENT == "gprd" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
gprd:upgrade:
  extends:
    - .deploy
    - .gprd
    - .only-auto-deploy-false-and-config-changes
  only:
    refs:
      - master
  script: "bin/grafana-annotate -e $CI_ENVIRONMENT_NAME\nsendEvent \"Starting k8s configuration for $CLUSTER\" \"gprd\" \"configuration\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s configuration for $CLUSTER\" \"gprd\" \"configuration\" \n"
  stage: gprd:deploy:alpha
  variables:
    DRY_RUN: "false"
gstg-cny:auto-deploy:
  extends:
    - .deploy
    - .gstg
  only:
    variables:
      - $ENVIRONMENT == "gstg-cny" && $DRY_RUN == "false" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  resource_group: gstg-cny
  script: |
    sendEvent "Starting k8s deployment for $CLUSTER" "gstg" "deployment" "cny"
    bin/k-ctl -s cny upgrade
    sendEvent "Finished k8s deployment for $CLUSTER" "gstg" "deployment" "cny"
  stage: non-prod-cny:deploy
gstg-cny:dryrun:
  extends:
    - .deploy
    - .gstg
    - .only-auto-deploy-false-and-config-changes
  resource_group: gstg-cny
  script: |
    bin/k-ctl -D -s cny upgrade
  stage: dryrun
gstg-cny:dryrun:auto-deploy:
  extends:
    - .deploy
    - .gstg
  only:
    variables:
      - $ENVIRONMENT == "gstg-cny" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  resource_group: gstg-cny
  script: |
    bin/k-ctl -D -s cny upgrade
  stage: dryrun
gstg-cny:upgrade:
  extends:
    - .deploy
    - .gstg
    - .only-auto-deploy-false-and-config-changes
  only:
    refs:
      - master
  resource_group: gstg-cny
  script: |
    bin/grafana-annotate -e $CI_ENVIRONMENT_NAME
    sendEvent "Starting k8s configuration for $CLUSTER" "gstg" "configuration" "cny"
    bin/k-ctl -s cny upgrade
    sendEvent "Finished k8s configuration for $CLUSTER" "gstg" "configuration" "cny"
  stage: non-prod-cny:deploy
  variables:
    DRY_RUN: "false"
gstg-us-east1-b:auto-deploy:
  extends:
    - .deploy
    - .gstg-us-east1-b
  only:
    variables:
      - $ENVIRONMENT == "gstg" && $DRY_RUN == "false" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: "sendEvent \"Starting k8s deployment for $CLUSTER\" \"gstg\" \"deployment\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s deployment for $CLUSTER\" \"gstg\" \"deployment\" \n"
  stage: non-prod:deploy
gstg-us-east1-b:dryrun:
  extends:
    - .deploy
    - .gstg-us-east1-b
    - .only-auto-deploy-false-and-config-changes
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
gstg-us-east1-b:dryrun:auto-deploy:
  extends:
    - .deploy
    - .gstg-us-east1-b
  only:
    variables:
      - $ENVIRONMENT == "gstg" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
gstg-us-east1-b:upgrade:
  extends:
    - .deploy
    - .gstg-us-east1-b
    - .only-auto-deploy-false-and-config-changes
  only:
    refs:
      - master
  script: "bin/grafana-annotate -e $CI_ENVIRONMENT_NAME\nsendEvent \"Starting k8s configuration for $CLUSTER\" \"gstg\" \"configuration\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s configuration for $CLUSTER\" \"gstg\" \"configuration\" \n"
  stage: non-prod:deploy
  variables:
    DRY_RUN: "false"
gstg-us-east1-c:auto-deploy:
  extends:
    - .deploy
    - .gstg-us-east1-c
  only:
    variables:
      - $ENVIRONMENT == "gstg" && $DRY_RUN == "false" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: "sendEvent \"Starting k8s deployment for $CLUSTER\" \"gstg\" \"deployment\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s deployment for $CLUSTER\" \"gstg\" \"deployment\" \n"
  stage: non-prod:deploy
gstg-us-east1-c:dryrun:
  extends:
    - .deploy
    - .gstg-us-east1-c
    - .only-auto-deploy-false-and-config-changes
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
gstg-us-east1-c:dryrun:auto-deploy:
  extends:
    - .deploy
    - .gstg-us-east1-c
  only:
    variables:
      - $ENVIRONMENT == "gstg" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
gstg-us-east1-c:upgrade:
  extends:
    - .deploy
    - .gstg-us-east1-c
    - .only-auto-deploy-false-and-config-changes
  only:
    refs:
      - master
  script: "bin/grafana-annotate -e $CI_ENVIRONMENT_NAME\nsendEvent \"Starting k8s configuration for $CLUSTER\" \"gstg\" \"configuration\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s configuration for $CLUSTER\" \"gstg\" \"configuration\" \n"
  stage: non-prod:deploy
  variables:
    DRY_RUN: "false"
gstg-us-east1-d:auto-deploy:
  extends:
    - .deploy
    - .gstg-us-east1-d
  only:
    variables:
      - $ENVIRONMENT == "gstg" && $DRY_RUN == "false" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: "sendEvent \"Starting k8s deployment for $CLUSTER\" \"gstg\" \"deployment\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s deployment for $CLUSTER\" \"gstg\" \"deployment\" \n"
  stage: non-prod:deploy
gstg-us-east1-d:dryrun:
  extends:
    - .deploy
    - .gstg-us-east1-d
    - .only-auto-deploy-false-and-config-changes
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
gstg-us-east1-d:dryrun:auto-deploy:
  extends:
    - .deploy
    - .gstg-us-east1-d
  only:
    variables:
      - $ENVIRONMENT == "gstg" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
gstg-us-east1-d:upgrade:
  extends:
    - .deploy
    - .gstg-us-east1-d
    - .only-auto-deploy-false-and-config-changes
  only:
    refs:
      - master
  script: "bin/grafana-annotate -e $CI_ENVIRONMENT_NAME\nsendEvent \"Starting k8s configuration for $CLUSTER\" \"gstg\" \"configuration\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s configuration for $CLUSTER\" \"gstg\" \"configuration\" \n"
  stage: non-prod:deploy
  variables:
    DRY_RUN: "false"
gstg:auto-deploy:
  extends:
    - .deploy
    - .gstg
  only:
    variables:
      - $ENVIRONMENT == "gstg" && $DRY_RUN == "false" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: "sendEvent \"Starting k8s deployment for $CLUSTER\" \"gstg\" \"deployment\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s deployment for $CLUSTER\" \"gstg\" \"deployment\" \n"
  stage: non-prod:deploy
gstg:dryrun:
  extends:
    - .deploy
    - .gstg
    - .only-auto-deploy-false-and-config-changes
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
gstg:dryrun:auto-deploy:
  extends:
    - .deploy
    - .gstg
  only:
    variables:
      - $ENVIRONMENT == "gstg" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
gstg:qa:
  except:
    variables:
      - $CI_API_V4_URL == "https://gitlab.com/api/v4"
      - $CI_COMMIT_REF_NAME != 'master'
      - $EXPEDITE_DEPLOYMENT
  extends:
    - .trigger-qa-smoke
  only:
    changes:
      - vendor/charts/gitlab/gstg/**/*
      - vendor/charts/gitlab-runner/gstg/**/*
      - .gitlab-ci.yml
      - '*.yaml'
      - releases/gitlab/helmfile.yaml
      - releases/gitlab/values/values*
      - releases/gitlab/values/gstg*
  stage: non-prod:QA
  variables:
    project: gitlab-org/quality/staging
gstg:upgrade:
  extends:
    - .deploy
    - .gstg
    - .only-auto-deploy-false-and-config-changes
  only:
    refs:
      - master
  script: "bin/grafana-annotate -e $CI_ENVIRONMENT_NAME\nsendEvent \"Starting k8s configuration for $CLUSTER\" \"gstg\" \"configuration\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s configuration for $CLUSTER\" \"gstg\" \"configuration\" \n"
  stage: non-prod:deploy
  variables:
    DRY_RUN: "false"
include:
  - /ci/deploy.yml
  - /ci/except-com.yml
  - /ci/except-ops.yml
  - /ci/cluster-init-before-script.yml
  - /ci/shellcheck.yml
  - /ci/version-checks.yml
  - /ci/check-vendored-charts.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
notify_com_mr:
  allow_failure: true
  except:
    variables:
      - $CI_API_V4_URL == "https://gitlab.com/api/v4"
      - $EXPEDITE_DEPLOYMENT
  image: ${CI_REGISTRY}/gitlab-com/gl-infra/k8s-workloads/common/notify-mr:${CI_IMAGE_VERSION}
  only:
    variables:
      - $AUTO_DEPLOY == "false" && $CI_PIPELINE_SOURCE != "schedule"
  script: |
    notify-mr -s
  stage: check
open-chart-bump-mr-gprd:
  image: ${CI_REGISTRY}/gitlab-com/gl-infra/k8s-workloads/common/k8-helm-ci:${CI_IMAGE_VERSION}
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - when: never
  script: |
    chmod 400 "$SSH_PRIVATE_KEY"
    export GIT_SSH_COMMAND="ssh -i $SSH_PRIVATE_KEY -o IdentitiesOnly=yes -o GlobalKnownHostsFile=$SSH_KNOWN_HOSTS"
    git config --global user.email "ops@ops.gitlab.net"
    git config --global user.name "ops-gitlab-net"
    git remote set-url origin https://ops-gitlab-net:${GITLAB_API_TOKEN}@gitlab.com/gitlab-com/gl-infra/k8s-workloads/gitlab-com.git
    echo $GITLAB_API_TOKEN | glab auth login --hostname gitlab.com --stdin
    glab config set git_protocol https
    glab auth status
    ./bin/autobump-gitlab-chart.sh gprd
  stage: scheduled
open-chart-bump-mr-gstg:
  image: ${CI_REGISTRY}/gitlab-com/gl-infra/k8s-workloads/common/k8-helm-ci:${CI_IMAGE_VERSION}
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - when: never
  script: |
    chmod 400 "$SSH_PRIVATE_KEY"
    export GIT_SSH_COMMAND="ssh -i $SSH_PRIVATE_KEY -o IdentitiesOnly=yes -o GlobalKnownHostsFile=$SSH_KNOWN_HOSTS"
    git config --global user.email "ops@ops.gitlab.net"
    git config --global user.name "ops-gitlab-net"
    git remote set-url origin https://ops-gitlab-net:${GITLAB_API_TOKEN}@gitlab.com/gitlab-com/gl-infra/k8s-workloads/gitlab-com.git
    echo $GITLAB_API_TOKEN | glab auth login --hostname gitlab.com --stdin
    glab config set git_protocol https
    glab auth status
    ./bin/autobump-gitlab-chart.sh gstg
  stage: scheduled
open-chart-bump-mr-pre:
  image: ${CI_REGISTRY}/gitlab-com/gl-infra/k8s-workloads/common/k8-helm-ci:${CI_IMAGE_VERSION}
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - when: never
  script: |
    chmod 400 "$SSH_PRIVATE_KEY"
    export GIT_SSH_COMMAND="ssh -i $SSH_PRIVATE_KEY -o IdentitiesOnly=yes -o GlobalKnownHostsFile=$SSH_KNOWN_HOSTS"
    git config --global user.email "ops@ops.gitlab.net"
    git config --global user.name "ops-gitlab-net"
    git remote set-url origin https://ops-gitlab-net:${GITLAB_API_TOKEN}@gitlab.com/gitlab-com/gl-infra/k8s-workloads/gitlab-com.git
    echo $GITLAB_API_TOKEN | glab auth login --hostname gitlab.com --stdin
    glab config set git_protocol https
    glab auth status
    ./bin/autobump-gitlab-chart.sh pre
  stage: scheduled
pre:auto-deploy:
  extends:
    - .deploy
    - .pre
  only:
    variables:
      - $ENVIRONMENT == "pre" && $DRY_RUN == "false" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: "sendEvent \"Starting k8s deployment for $CLUSTER\" \"pre\" \"deployment\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s deployment for $CLUSTER\" \"pre\" \"deployment\" \n"
  stage: non-prod:deploy
pre:dryrun:
  extends:
    - .deploy
    - .pre
    - .only-auto-deploy-false-and-config-changes
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
pre:dryrun:auto-deploy:
  extends:
    - .deploy
    - .pre
  only:
    variables:
      - $ENVIRONMENT == "pre" && $AUTO_DEPLOY == "true" && $CI_PIPELINE_SOURCE != "schedule"
  script: |
    bin/k-ctl -D  upgrade
  stage: dryrun
pre:qa:
  allow_failure: true
  except:
    variables:
      - $CI_API_V4_URL == "https://gitlab.com/api/v4"
      - $CI_COMMIT_REF_NAME != 'master'
      - $EXPEDITE_DEPLOYMENT
  extends:
    - .trigger-qa-smoke
  only:
    changes:
      - vendor/charts/gitlab/pre/**/*
      - vendor/charts/gitlab-runner/pre/**/*
      - .gitlab-ci.yml
      - '*.yaml'
      - releases/gitlab/helmfile.yaml
      - releases/gitlab/values/values*
      - releases/gitlab/values/pre*
  stage: non-prod:QA
  variables:
    project: gitlab-org/quality/preprod
pre:upgrade:
  extends:
    - .deploy
    - .pre
    - .only-auto-deploy-false-and-config-changes
  only:
    refs:
      - master
  script: "bin/grafana-annotate -e $CI_ENVIRONMENT_NAME\nsendEvent \"Starting k8s configuration for $CLUSTER\" \"pre\" \"configuration\" \nbin/k-ctl  upgrade\nsendEvent \"Finished k8s configuration for $CLUSTER\" \"pre\" \"configuration\" \n"
  stage: non-prod:deploy
  variables:
    DRY_RUN: "false"
remove-expedite-variable:
  image: ${CI_REGISTRY}/gitlab-com/gl-infra/k8s-workloads/common/k8-helm-ci:${CI_IMAGE_VERSION}
  rules:
    - if: $CI_API_V4_URL == "https://gitlab.com/api/v4"
      when: never
    - if: $AUTO_DEPLOY == "true"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: ($CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH) && $EXPEDITE_DEPLOYMENT
  script: |
    curl --fail --header "PRIVATE-TOKEN: ${OPS_API_TOKEN}" -X DELETE "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/variables/EXPEDITE_DEPLOYMENT"
  stage: cleanup
retire-js-dependency_scanning:
  stage: check
stages:
  - check
  - dryrun-check
  - dryrun
  - non-prod-cny:deploy
  - non-prod:deploy
  - non-prod:QA
  - gprd-cny:deploy
  - gprd:deploy:alpha
  - gprd:deploy:beta
  - cleanup
  - scheduled
variables:
  AUTO_DEPLOY: "false"
  CI_IMAGE_VERSION: v15.4.0
